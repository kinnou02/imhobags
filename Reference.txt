Basic globals:
	UI.CreateContext
		Function documentation:
			Creates a new UI context. A UI context must be created in order to create any frames.
				context = UI.CreateContext(name)   -- Context <- string
		Parameters:
				name:	A descriptive name for this element. Used for error reports and performance information. May be shown to end-users.
		Return values:
				context:	A new context. Contexts are guaranteed to have at least the capabilities of a Frame.
	UI.CreateFrame
		Function documentation:
			Creates a new frame. Frames are the blocks that all addon UIs are made out of. Since all frames must have a parent, you'll need to create a Context before any frames. See UI.CreateContext.
			List of valid frame types:
			Frame: The base type. No special capabilities. Useful for spacing, organization, input handling, and solid color squares.
			Mask: Obscures the contents of child frames that do not fall within the mask boundaries.
			Text: Displays text.
			Texture: Displays a static texture image.
			RiftButton: A standard Rift button widget.
			RiftCheckbox: A standard Rift checkbox widget.
			RiftScrollbar: A standard Rift scrollbar widget.
			RiftSlider: A standard Rift slider widget.
			RiftTextfield: A standard Rift textfield widget.
			RiftWindow: A standard Rift window widget.
				frame = UI.CreateFrame(type, name, parent)   -- Frame <- string, string, Element
		Parameters:
				name:	A descriptive name for this element. Used for error reports and performance information. May be shown to end-users.
				parent:	The new parent for this frame.
				type:	The type of your new frame. Current supported types: Frame, Text, Texture.
		Return values:
				frame:	Your new frame.
	UIParent.Event.Move
	UIParent.Event.Size
	_VERSION
	assert
	bit.arshift
	bit.band
	bit.bnot
	bit.bor
	bit.bswap
	bit.bxor
	bit.lshift
	bit.rol
	bit.ror
	bit.rshift
	bit.tobit
	bit.tohex
	collectgarbage
	coroutine.create
	coroutine.resume
	coroutine.running
	coroutine.status
	coroutine.wrap
	coroutine.yield
	debug.traceback
	dump
		Function documentation:
			Debug utility function. Similar to print(), but serializes any table parameters before outputting.
				dump(...)   -- ...
		Parameters:
				...:	Takes any number of any parameter type.
	error
	gcinfo
	getfenv
	getmetatable
	ipairs
	load
	loadstring
	math.abs
	math.acos
	math.asin
	math.atan
	math.atan2
	math.ceil
	math.cos
	math.cosh
	math.deg
	math.exp
	math.floor
	math.fmod
	math.frexp
	math.huge
	math.ldexp
	math.log
	math.log10
	math.max
	math.min
	math.mod
	math.modf
	math.pi
	math.pow
	math.rad
	math.random
	math.randomseed
	math.sin
	math.sinh
	math.sqrt
	math.tan
	math.tanh
	newproxy
	next
	os.date
	os.difftime
	os.time
	pairs
	pcall
	print
	print_raw
	rawequal
	rawget
	rawset
	select
	setfenv
	setmetatable
	string.byte
	string.char
	string.find
	string.format
	string.gfind
	string.gmatch
	string.gsub
	string.len
	string.lower
	string.match
	string.rep
	string.reverse
	string.sub
	string.upper
	table.concat
	table.foreach
	table.foreachi
	table.getn
	table.insert
	table.maxn
	table.remove
	table.sort
	table.unpack
	tonumber
	tostring
	type
	unpack
	xpcall
 
Inspectors:
	Inspect.Ability.Detail
		Function documentation:
			Provides detailed information about abilities.
				detail = Inspect.Ability.Detail(ability)   -- table <- ability
				details = Inspect.Ability.Detail(abilities)   -- table <- table
		Parameters:
				abilities:	A lookup table of identifiers of abilities to retrieve detail for.
				ability:	The identifier of the ability to retrieve detail for.
		Return values:
				detail:	Detail table for a single ability.
				details:	Detail tables for all requested abilities. The key is the ability ID, the value is the ability's detail table.
		Returned members:
				autoattack:	Autoattack mode of the ability.
				castingTime:	Casting time of the ability, in seconds.
				channeled:	Signals that the ability is channeled.
				continuous:	Signals that the ability is continuous.
				cooldown:	Cooldown of the ability, in seconds.
				costCharge:	The amount of charge this ability consumes on use.
				costEnergy:	The amount of energy this ability consumes on use.
				costMana:	The amount of mana this ability consumes on use.
				costPlanarCharge:	The amount of planar charges this ability consumes on use.
				costPower:	The amount of power this ability consumes on use.
				currentCooldownBegin:	The time the current cooldown started, in the context of Inspect.Time.Frame.
				currentCooldownDuration:	Duration of the current cooldown the ability is influenced by, in seconds.
				currentCooldownExpired:	Number of seconds the current cooldown is past its expiration time. Generally indicates lag.
				currentCooldownRemaining:	Time remaining in the ability's current cooldown, in seconds.
				description:	Description for the ability.
				gainCharge:	Amount of charge gained by using the ability.
				icon:	Resource filename of the ability's icon.
				id:	The ID of the requested element.
				name:	Name of the ability.
				outOfRange:	Signals that the ability is out of range.
				passive:	Signals that the ability is passive.
				positioned:	Signals that the ability's effect is manually positioned by the user.
				racial:	Signals that the ability is a racial ability.
				rangeMax:	The maximum range of the ability.
				rangeMin:	The minimum range of the ability.
				stealthRequired:	Signals that the ability requires the user to be in stealth.
				target:	The Unit ID of the unit that this ability will be used on if triggered at this moment.
				unusable:	Signals that this ability is unusable.
				weapon:	The required equipped weapon for this ability. May be "any", "melee", or "ranged".
	Inspect.Ability.List
		Function documentation:
			List available abilities.
				abilities = Inspect.Ability.List()   -- table <- void
		Return values:
				abilities:	A lookup table of IDs of the available abilities.
	Inspect.Achievement.Category.Detail
		Function documentation:
			Returns information about achievement categories.
				detail = Inspect.Achievement.Category.Detail(category)   -- table <- achievementcategory
				details = Inspect.Achievement.Category.Detail(categories)   -- table <- table
		Parameters:
				categories:	A lookup table of identifiers of achievement categories to retrieve detail for.
				category:	The identifier of the achievement category to retrieve detail for.
		Return values:
				detail:	Detail table for a single achievement category.
				details:	Detail tables for all requested achievement categories. The key is the category ID, the value is the category's detail table.
		Returned members:
				id:	The ID of the requested element.
				name:	The name of the achievement category.
				parent:	The category's parent, if it has one.
	Inspect.Achievement.Category.List
		Function documentation:
			Returns a lookup table of valid achievement categories.
				categories = Inspect.Achievement.Category.List()   -- table <- void
		Return values:
				categories:	Valid achievement categories, in {id = true} format.
	Inspect.Achievement.Detail
		Function documentation:
			Provides detailed information about achievements.
				detail = Inspect.Achievement.Detail(achievement)   -- table <- achievement
				details = Inspect.Achievement.Detail(achievements)   -- table <- table
		Parameters:
				achievement:	The identifier of the achievement to retrieve detail for.
				achievements:	A lookup table of identifiers of achievements to retrieve detail for.
		Return values:
				detail:	Detail table for a single achievement.
				details:	Detail tables for all requested achievements. The key is the achievement ID, the value is the achievement's detail table.
		Returned members:
				category:	ID of the achievement's category.
				complete:	true is the achievement is completed by this character. If the achievement has been completed by another of the player's characters, gives that character's name.
				description:	The achievement's description.
				faction:	The faction that this achievement requires, either "guardian", "defiant", or nil.
				icon:	Internal name of the achievement's icon.
				id:	The ID of the requested element.
				name:	The achievement's name.
				previous:	The ID of the achievement immediately previous to this in a chain.
				requirement:	Table listing the requirements for this achievement. Each item may include multiple members.
						type: The type of the requirement. Valid values include "achievement", "artifactset", "discover", "event", "quest", and "tradeskill".
						name: The name of the requirement.
						count: The count required for completion.
						countDone: The count already completed.
						complete: Signals that this requirement is complete.
						id: The id of whatever this requires.
				score:	The number of points this achievement awards for completion.
				sort:	A number indicating the order that this achievement should be sorted in.
				title:	The ID of the title this achievement awards.
	Inspect.Achievement.List
		Function documentation:
			Returns a lookup table of all known achievements.
				achievements = Inspect.Achievement.List()   -- table <- void
		Return values:
				achievements:	All known achievements, in {id = true} format.
	Inspect.Addon.Cpu
		Function documentation:
			Returns recent CPU usage information. This is calculated using an exponential-falloff method.
				data = Inspect.Addon.Cpu()   -- table <- void
		Return values:
				data:	Recent CPU usage. This takes the format { AddonIdentifier = { SubIdentifier = cpu_used_as_a_fraction_of_one } }. SubIdentifiers are generated by Rift and the format may change without notice.
	Inspect.Addon.Current
		Function documentation:
			Returns the current addon. This information is used internally for counting CPU usage and determining frame ownership.
				addonIdentifier = Inspect.Addon.Current()   -- string <- void
		Return values:
				addonIdentifier:	The addon's identifier, as written in its TOC file.
	Inspect.Addon.Detail
		Function documentation:
			Provides detailed information about loaded addons.
				detail = Inspect.Addon.Detail(addon)   -- table <- string
				details = Inspect.Addon.Detail(addons)   -- table <- table
		Parameters:
				addon:	An addon identifier.
				addons:	A lookup table containing addon identifiers.
		Return values:
				detail:	Detail table for a single addon.
				details:	Detail tables for all requested addons. The key is the addon identifier, the value is the addon's detail table.
		Returned members:
				data:	The "data" table provided to the addon at load time.
				id:	The ID of the requested element.
				identifier:	The addon's identifier.
				toc:	The addon's RiftAddon.toc file, parsed and in table form.
	Inspect.Addon.List
		Function documentation:
			Lists all the addons that the client has loaded.
				addons = Inspect.Addon.List()   -- table <- void
		Return values:
				addons:	Map of addon identifier to addon version, or "true" if no version is provided.
	Inspect.Auction.Detail
		Function documentation:
			Provides detailed information about auctions.
			Requires the "auction" interaction flag to be set.
				detail = Inspect.Auction.Detail(auction)   -- table <- auction
				details = Inspect.Auction.Detail(auctions)   -- table <- table
		Parameters:
				auction:	An identifier for the auction to retrieve detail for.
				auctions:	A lookup table containing auction identifiers to retrieve details for. The value is the sort order.
		Return values:
				detail:	Detail table for a single auction.
				details:	Detail tables for all requested auctions. The key is the auction ID, the value is the auction's detail table.
		Returned members:
				bid:	The current bid on this auction, in silver.
				bidder:	Current high bidder on this auction. Available only if your current character is the bidder or the seller.
				buyout:	The buyout amount for this auction, in silver.
				id:	The ID of the requested element.
				item:	ID of the item involved in the auction.
				seller:	The name of the auction's seller.
				time:	Time remaining in the auction, as a string. Either "short", "medium", or "long".
	Inspect.Buff.Detail
		Function documentation:
			Provides detailed information about the buffs on a unit.
				detail = Inspect.Buff.Detail(unit, buff)   -- table <- unit, buff
				details = Inspect.Buff.Detail(unit, buffs)   -- table <- unit, table
		Parameters:
				buff:	An identifier for the buff to retrieve detail for.
				buffs:	A lookup table containing buff identifiers to retrieve details for.
				unit:	The unit to inspect.
		Return values:
				detail:	Detail table for a single buff.
				details:	Detail tables for all requested buffs. The key is the buff ID, the value is the buff's detail table.
		Returned members:
				ability:	The ID of the ability that created this buff. Not guaranteed to exist.
				begin:	The time the buff started, in the context of Inspect.Time.Frame.
				caster:	Unit ID of the buff's caster.
				curse:	Signals that the buff is a curse.
				debuff:	Signals that the buff is a debuff. If this is missing, then it's an actual buff.
				description:	Description for the buff. Numbers may not be accurate - see Command.Buff.Describe().
				descriptionComplete:	Signals that the buff description is complete.
				disease:	Signals that the buff is a disease.
				duration:	Duration of the buff in seconds.
				expired:	Number of seconds the buff is past its expiration time. Generally indicates lag.
				icon:	Resource filename of the buff's icon.
				id:	The ID of the requested element.
				name:	Name of the buff.
				noncancelable:	Signals that the buff cannot be voluntarily canceled. Does not show up for debuffs.
				poison:	Signals that the buff is a poison.
				remaining:	Time remaining on the buff, in seconds.
				rune:	If this buff is created by a rune, the ID of the rune causing it.
				stack:	Number of stacks on the buff.
				type:	The buff type ID.
	Inspect.Buff.List
		Function documentation:
			List buffs on a unit.
				buffs = Inspect.Buff.List(unit)   -- table <- unit
		Parameters:
				unit:	The unit to inspect.
		Return values:
				buffs:	A lookup table of the IDs of the buffs on the unit.
	Inspect.Currency.Category.Detail
		Function documentation:
			Returns information about currency categories.
				detail = Inspect.Currency.Category.Detail(category)   -- table <- currencycategory
				details = Inspect.Currency.Category.Detail(categories)   -- table <- table
		Parameters:
				categories:	A lookup table of identifiers of currency categories to retrieve detail for.
				category:	The identifier of the currency category to retrieve detail for.
		Return values:
				detail:	Detail table for a single currency category.
				details:	Detail tables for all requested currency categories. The key is the category ID, the value is the category's detail table.
		Returned members:
				id:	The ID of the requested element.
				name:	The name of the currency category.
	Inspect.Currency.Category.List
		Function documentation:
			Returns a lookup table of valid currency categories.
				categories = Inspect.Currency.Category.List()   -- table <- void
		Return values:
				categories:	Valid currency categories, in {id = true} format.
	Inspect.Currency.Detail
		Function documentation:
			Provides detailed information about currencies.
				detail = Inspect.Currency.Detail(coin)   -- table <- string
				detail = Inspect.Currency.Detail(currency)   -- table <- itemtype
				details = Inspect.Currency.Detail(currencies)   -- table <- table
		Parameters:
				coin:	The string "coin", used as a value to request the player's money.
				currencies:	A lookup table of identifiers of currencies to retrieve detail for.
				currency:	The identifier of the currency to retrieve detail for.
		Return values:
				detail:	Detail table for a single currency.
				details:	Detail tables for all requested currencies. The key is the currency ID, the value is the currency's detail table.
		Returned members:
				category:	ID of the currency's category.
				icon:	Internal name of the currency's icon.
				id:	The ID of the requested element.
				name:	The currency's name.
				stack:	The number of this currency that you have.
				stackMax:	The maximum number of this currency that you can have.
	Inspect.Currency.List
		Function documentation:
			Returns a lookup table of all known currencies.
				currencies = Inspect.Currency.List()   -- table <- void
		Return values:
				currencies:	All known currencies, in {id = true} format.
	Inspect.Cursor
		Function documentation:
			Returns the current contents of the cursor.
				type, held = Inspect.Cursor()   -- nil, nil <- void
				type, held = Inspect.Cursor()   -- string, variant <- void
		Return values:
				held:	The blob describing what is currently held. Generally, some kind of identifier used in another part of the addon system.
				type:	The current cursor type. Valid values include "ability", "item", and "itemtype".
	Inspect.Documentation
		Function documentation:
			Provide documentation on items in the addon environment. Called with no parameters, it returns a table listing all documentation. Can provide both human-readable and computer-readable documentation.
				documentables = Inspect.Documentation()   -- table <- void
				documentation = Inspect.Documentation(item)   -- string <- variant
				documentation = Inspect.Documentation(item, parseable)   -- string <- variant, boolean
				documentationTable = Inspect.Documentation(item, parseable)   -- table <- variant, boolean
		Parameters:
				item:	The item to get documentation on. May be either the item itself or a string identifier.
				parseable:	Whether to return in a computer-readable format, as opposed to the normal human-readable format.
		Return values:
				documentables:	List of all items that documentation can be retrieved for. In {["itemname"] = true} format.
				documentation:	Documentation for the requested item.
				documentationTable:	Computer-readable documentation for the requested item. Format may change without warning.
	Inspect.Interaction
		Function documentation:
			Provides information about what types of interaction are available.
				interactions = Inspect.Interaction()   -- table <- void
				status = Inspect.Interaction(interaction)   -- boolean <- string
		Parameters:
				interaction:	Optional name of the interaction type to query. Valid values include "auction", "bank", "guildbank", and "mail".
		Return values:
				interactions:	Lookup table from interaction type to indicator of whether that interaction is available.
				status:	Whether or not that interaction type is available.
	Inspect.Item.Detail
		Function documentation:
			Provides detailed information about items.
				item = Inspect.Item.Detail(item)   -- table <- item
				item = Inspect.Item.Detail(itemtype)   -- table <- itemtype
				item = Inspect.Item.Detail(slot)   -- table <- slot
				items = Inspect.Item.Detail(slot)   -- table <- slot
				items = Inspect.Item.Detail(elements)   -- table <- table
		Parameters:
				elements:	A lookup table of slot specifiers, item IDs, or item types.
				item:	A single item ID.
				itemtype:	A single item type.
				slot:	A single slot specifier.
		Return values:
				item:	Detail table for a single item.
				items:	Detail tables for all requested items. The key is the string used to lookup, the value is the item's detail table.
		Returned members:
				bind:	The item's binding type. May be "equip", "use", "pickup", or "account".
				bound:	The item's bound flag.
				category:	The item's type category.
				coin:	The amount of silver this item represents.
				cooldown:	The cooldown for using this item.
				cooldownBegin:	The time the current cooldown started, in the context of Inspect.Time.Frame.
				cooldownDuration:	Duration of the current cooldown the item is influenced by, in seconds.
				cooldownExpired:	Number of seconds the current cooldown is past its expiration time. Generally indicates lag.
				cooldownRemaining:	Time remaining in the item's current cooldown, in seconds.
				crafter:	The name of the player who crafted this item.
				damageDelay:	If a weapon, the delay between autoattacks using this weapon.
				damageMax:	If a weapon, the maximum damage done by a single hit with this item.
				damageMin:	If a weapon, the minimum damage done by a single hit with this item.
				damageType:	If a weapon, the damage type done by autoattacks. Values include "life", "death", "air", "earth", "fire", and "water".
				description:	The description of this item.
				flavor:	The flavor text for this item.
				icon:	Resource filename of the item's icon.
				id:	The ID of the requested element.
				lootable:	Indicates that the item contains loot.
				name:	The item's name.
				range:	If a ranged weapon, the maximum range of this item.
				rarity:	The item's rarity. Values include "sellable", "uncommon", "rare", "epic", "relic", "transcendant", or "quest". Common items have a rarity of nil.
				requiredCalling:	Space-delimited list of the required callings to use this item.
				requiredFaction:	The ID of the faction required to use this item.
				requiredFactionLevel:	The faction notoriety required to use this item.
				requiredLevel:	The level required to use this item.
				requiredPrestige:	The prestige rank required to use this item.
				requiredSkill:	The skill required to use this item.
				requiredSkillLevel:	The skill level required to use this item.
				sell:	The sell value of this item, in silver.
				slots:	If a container, the number of slots that this item can contain.
				stack:	The size of this item stack.
				stackMax:	The maximum size of this item stack.
				stats:	The base stats of this item. Members may include "block", "critAttack", "critSpell", "dexterity", "dodge", "endurance", "energyMax", "energyRegen", "focus", "hit", "intelligence", "manaMax", "manaRegen", "movement", "parry", "powerAttack", "powerMax", "powerRegen", "powerSpell", "resistAir", "resistDeath", "resistEarth", "resistFire", "resistLife", "resistWater", "stealth", "stealthDetect", "strength", "wisdom", "xp", "valor", "toughness", and "vengeance".
				statsRune:	The added rune stats of this item. May contain the same members as stats.
				statsRuneTemporary:	The added temporary rune stats of this item. May contain the same members as stats.
				type:	The item's type specifier.
	Inspect.Item.Find
		Function documentation:
			Finds a slot specifier based on an item ID.
				slot = Inspect.Item.Find(item)   -- slot <- item
				slots = Inspect.Item.Find(items)   -- table <- table
		Parameters:
				item:	A single item ID.
				items:	A lookup table of item IDs.
		Return values:
				slot:	A slot specifier for that item.
				slots:	Slot specifiers for all requested items. The key is the string used to lookup, the value is the slot specifier.
	Inspect.Item.List
		Function documentation:
			Generate a list of item IDs from a slot specifier or set of slot specifiers.
				items = Inspect.Item.List()   -- table <- void
				item = Inspect.Item.List(slot)   -- item <- slot
				items = Inspect.Item.List(slot)   -- table <- slot
				items = Inspect.Item.List(slots)   -- table <- table
		Parameters:
				slot:	A single slot specifier.
				slots:	A table of slot specifiers.
		Return values:
				item:	A single item ID. This will be returned only if the input is a single fully-specified slot specifier.
				items:	A lookup table of item IDs. The key is the slot specifier, the value is the item ID.
	Inspect.Mail.Detail
		Function documentation:
			Returns information about mail.
			Requires the "mail" interaction flag to be set.
				detail = Inspect.Mail.Detail(mail)   -- table <- mail
				details = Inspect.Mail.Detail(mails)   -- table <- table
		Parameters:
				mail:	The identifier of the mail to retrieve detail for.
				mails:	A lookup table of identifiers of mail to retrieve detail for.
		Return values:
				detail:	Detail table for a single mail.
				details:	Detail tables for all requested mail. The key is the mail ID, the value is the mail's detail table.
		Returned members:
				attachments:	The attachments available on this mail. A number if this mail has basic information, or a table of item IDs if this mail has detailed information.
				body:	The body of this mail. Available only if detailed information on the mail has been retrieved.
				cod:	The Cash on Delivery required to retrieve attachments out of this mail message.
				expire:	The time this mail will expire, in Unix timestamp form.
				from:	The name of the character this mail was sent from.
				id:	The ID of the requested element.
				read:	"true" if you have already opened this mail.
				spam:	"true" if this mail is considered spam.
				subject:	The subject line for this mail.
	Inspect.Mail.List
		Function documentation:
			Returns a lookup table of valid mail and its status.
			Requires the "mail" interaction flag to be set.
				mails = Inspect.Mail.List()   -- table <- void
		Return values:
				mails:	Valid mail, in {id = "type"} format. The type may be either "basic" or "detail", indicating whether the mail has been opened and its detailed information is available.
	Inspect.Mouse
		Function documentation:
			Returns information about the current mouse position and button state.
				results = Inspect.Mouse()   -- table <- void
		Return values:
				results:	Table containing the current mouse state. May include members x, y, Left, Right, Middle, Mouse4, Mouse5.
	Inspect.Queue.Handler
		Function documentation:
			Returns the current queue handler function.
				handler, owner = Inspect.Queue.Handler()   -- function, string <- void
		Return values:
				handler:	The current queue handler function.
				owner:	The owner of the current queue handler function.
	Inspect.Queue.Status
		Function documentation:
			Inspects the current queue status. Omit the first parameter to get a table containing information on all queues.
				results = Inspect.Queue.Status()   -- table <- void
				result = Inspect.Queue.Status(queue)   -- boolean <- string
		Parameters:
				queue:	Optional identifier of the queue to query. Valid values include "global" and "auctionfullscan".
		Return values:
				result:	false if this queue is throttled, non-false otherwise.
				results:	A key/value table. The first parameter is the name of the queue. The second parameter is false if the queue is throttled, non-false otherwise.
	Inspect.Shard
		Function documentation:
			Returns information about the current shard.
				shard = Inspect.Shard()   -- table <- void
		Return values:
				shard:	Table containing requested data.
		Returned members:
				name:	The shard's name.
	Inspect.Stat
		Function documentation:
			Returns information about the player's stats.
				results = Inspect.Stat()   -- table <- void
				result = Inspect.Stat(stat)   -- number <- string
		Parameters:
				stat:	Optional parameter identifying the stat desired. May be any of strength, dexterity, intelligence, wisdom, endurance, valor, toughness, resistLife, resistDeath, resistFire, resistWater, resistEarth, resistAir, armor, powerAttack, critAttack, hit, powerSpell, critSpell, focus, block, parry, dodge, vengeance, deflect, or any of the previous with "Unbuffed" appended.
		Return values:
				result:	The current value of that stat.
				results:	A lookup table from stat ID to stat value, containing all the player's stats.
	Inspect.System.Language
		Function documentation:
			Returns the client's current language.
				language = Inspect.System.Language()   -- string <- void
		Return values:
				language:	Current language. Valid values include "English", "French", "German", "Korean", "Russian".
	Inspect.System.Secure
		Function documentation:
			Returns the client's current secure mode.
				secure = Inspect.System.Secure()   -- boolean <- void
		Return values:
				secure:	The current secure mode.
	Inspect.TEMPORARY.Role
		Function documentation:
			Returns the ID of the player's current role.
			This function is deprecated and will be removed in the future. It should not be used.
				role = Inspect.TEMPORARY.Role()   -- number <- void
		Return values:
				role:	The ID of the player's current role.
	Inspect.Time.Frame
		Function documentation:
			The game time of the last frame. This function's return value will not change until the next frame.
				time = Inspect.Time.Frame()   -- number <- void
		Return values:
				time:	Time in seconds. Counted from an arbitrary point in the past. Guaranteed to be non-negative.
	Inspect.Time.Real
		Function documentation:
			A high-resolution realtime timer. Not measured in the same timespace as Inspect.Time.Frame.
				time = Inspect.Time.Real()   -- number <- void
		Return values:
				time:	Time in seconds. Counted from an arbitrary point in the past. Guaranteed to be non-negative.
	Inspect.Tooltip
		Function documentation:
			Returns the current contents of the tooltip.
				type, shown = Inspect.Tooltip()   -- nil, nil <- void
				type, shown = Inspect.Tooltip()   -- string, variant <- void
				type, unit, buff = Inspect.Tooltip()   -- string, unit, buff <- void
		Return values:
				buff:	The ID of the tooltip's buff.
				shown:	The blob describing what is currently shown. Generally, some kind of identifier used in another part of the addon system.
				type:	The current tooltip type. Valid values include "ability", "buff", "item", "itemtype", and "unit".
				unit:	The unit that the buff is attached to.
	Inspect.Unit.Castbar
		Function documentation:
			Provides detailed information about a unit's castbar.
				detail = Inspect.Unit.Castbar(unit)   -- table <- unit
				details = Inspect.Unit.Castbar(units)   -- table <- table
		Parameters:
				unit:	A unit, in either unit ID or unit specifier format.
				units:	A lookup table containing units to inspect.
		Return values:
				detail:	Detail table for a single castbar.
				details:	Detail tables for all requested castbars. The key is the unit ID or unit specifier, the value is the castbar's detail table.
		Returned members:
				ability:	ID of the ability being cast, if available.
				abilityName:	Name of the ability being cast.
				begin:	The time the cast started, in the context of Inspect.Time.Frame.
				channeled:	True if this ability is channeled.
				duration:	Duration of the cast in seconds.
				expired:	Number of the seconds the cast is past its completion time. Generally indicates lag.
				remaining:	Time remaining on the cast, in seconds.
				uninterruptible:	Signals that the cast is not interruptible.
	Inspect.Unit.Detail
		Function documentation:
			Provides detailed information about a unit.
				detail = Inspect.Unit.Detail(unit)   -- table <- unit
				details = Inspect.Unit.Detail(units)   -- table <- table
		Parameters:
				unit:	A unit, in either unit ID or unit specifier format.
				units:	A lookup table containing units to inspect.
		Return values:
				detail:	Detail table for a single unit.
				details:	Detail tables for all requested units. The key is the unit ID or unit specifier, the value is the unit's detail table.
		Returned members:
				afk:	Signals that the unit is AFK. Provided only for the player and the player's groupmembers.
				aggro:	Signals that this unit is being attacked. Provided only for groupmembers.
				blocked:	Signals that this unit is not in line of sight. Provided only for groupmembers.
				calling:	The unit's calling. May be "mage", "rogue", "cleric", or "warrior".
				charge:	The unit's charge. Provided only for the player.
				chargeMax:	The unit's maximum charge. Provided only for the player.
				combat:	The unit's combat status.
				combo:	The unit's combo points. Provided only for the player.
				comboUnit:	The Unit ID of the unit that the combo points have been placed on. Provided only for the player.
				energy:	The unit's energy.
				energyMax:	The unit's maximum energy.
				faction:	The unit's faction. "defiant", "guardian", or nil.
				factionId:	The unit's faction ID.
				factionName:	The unit's faction name.
				guaranteedLoot:	Signals that this unit guarantees loot on death. Shown in the user interface as a diamond above the portrait.
				guild:	The unit's guild.
				health:	The unit's health.
				healthCap:	The unit's capped maximum health.
				healthMax:	The unit's maximum health.
				id:	The ID of the requested element.
				level:	The unit's level. May be "??" if the unit is hostile and very high-level.
				locationName:	The name of the unit's location. Provided only for friendly players.
				loot:	The Unit ID that has looting rights to this corpse.
				mana:	The unit's mana.
				manaMax:	The unit's maximum mana.
				mark:	The mark on this unit.
				name:	The unit's name.
				nameSecondary:	The unit's secondary name.
				offline:	Signals that the unit is offline. Provided only for the player's groupmembers.
				planar:	The unit's available planar charges. Provided only for the player or groupmembers.
				planarMax:	The unit's maximum planar charges. Provided only for the player or groupmembers.
				player:	Signals that the unit is a player, not an NPC.
				power:	The unit's power.
				publicSize:	The unit's current public group size. nil if the group is not public. Provided only for friendly players.
				pvp:	The unit's PvP flag.
				race:	The unit's race. Provided only for players.
				raceName:	The unit's race, localized. Provided only for players.
				ready:	The unit's readycheck status.
				relation:	The unit's relation to you. May be "hostile" or "friendly". Neutral targets will not have this member.
				role:	The unit's role. May be "tank", "heal", "dps", "support", or nil. Provided only for the player and the player's groupmembers.
				tag:	The unit's tags, space-separated.
				tagName:	The unit's tags, localized.
				tagged:	The unit's tagged status. true if the unit has been tagged by you, "other" if the unit has been tagged by someone else.
				tier:	The unit's difficulty tier. nil, "group", or "raid".
				titlePrefixId:	The unit's title prefix ID.
				titlePrefixName:	The unit's localized title prefix.
				titleSuffixId:	The unit's title suffix ID.
				titleSuffixName:	The unit's localized title suffix.
				type:	The unit type ID.
				vitality:	The unit's vitality. Provided only for the player or groupmembers.
				warfront:	Signals that the unit has temporarily left the group to join a warfront. Provided only for groupmembers.
	Inspect.Unit.List
		Function documentation:
			Lists all the units that the client can see.
				list = Inspect.Unit.List()   -- table <- void
		Return values:
				list:	Map of unit ID to unit specifier. Units with multiple valid specifiers will have one chosen at random.
	Inspect.Unit.Lookup
		Function documentation:
			Converts unit IDs to unit specifiers and vice-versa.
				unit = Inspect.Unit.Lookup(unit)   -- unit <- unit
				units = Inspect.Unit.Lookup(units)   -- table <- table
		Parameters:
				unit:	A single unit ID or unit specifier.
				units:	A lookup table containing unit IDs and unit specifiers.
		Return values:
				unit:	A unit ID or unit specifier, whichever is the opposite of the parameter given. May be nil.
				units:	A lookup table of unit IDs and unit specifiers. The key is the input, the value is the result. Invalid inputs will not result in output entries.
 
Commands:
	Command.Auction.Bid
		Function documentation:
			Bids on an auction.
			This function consumes a hardware event to function. Hardware events include MouseDown, MouseUp, and Wheel operations.
			Requires the "auction" interaction flag to be set.
				Command.Auction.Bid(auction, bid)   -- auction, number
		Parameters:
				auction:	The auction to be targeted.
				bid:	The amount to bid. To place a buyout, simply bid the buyout value.
	Command.Auction.Cancel
		Function documentation:
			Cancels an auction.
			This function consumes a hardware event to function. Hardware events include MouseDown, MouseUp, and Wheel operations.
			Requires the "auction" interaction flag to be set.
				Command.Auction.Cancel(auction)   -- auction
		Parameters:
				auction:	The auction to be targeted.
	Command.Auction.Post
		Function documentation:
			Posts a new auction.
			Requires the "auction" interaction flag to be set.
			This function is subject to the "global" command queue.
				Command.Auction.Post(item, time, bid, buyout)   -- item, number, number, number/nil
		Parameters:
				bid:	The minimum bid for the new auction, in silver.
				buyout:	The buyout for the new auction, in silver. nil if no buyout is desired.
				item:	The ID of the item to be auctioned.
				time:	The duration that the auction should last, in hours. Valid values are limited to 12, 24, and 48.
	Command.Auction.Scan
		Function documentation:
			Requests an auction house scan. If "index" is omitted then this function will error if the "auctionfullscan" queue is not ready. Otherwise, this function is subject to the "global" command queue.
			This function consumes a hardware event to function. Hardware events include MouseDown, MouseUp, and Wheel operations.
			Requires the "auction" interaction flag to be set.
				Command.Auction.Scan(parameters)   -- table
		Parameters:
				parameters:	Table containing data about the requested scan.
						category: Category to search for. Same as the "category" member returned by Inspect.Item.Detail(). Optional.
						levelMax: Maximum level the item must require. Optional.
						levelMin: Minimum level the item must require. Optional.
						priceMax: Maximum price of the item. Optional.
						priceMin: Minimum price of the item. Optional.
						rarity: The minimum rarity to search for. Same as the "rarity" member returned by Inspect.Item.Detail(). Optional.
						role: The role that the item must be compatible with. One of "mage", "rogue", "cleric", or "warrior". Optional.
						sort: Which column the requested items should be sorted based on. One of "rarity", "name", "level", "time", "seller", "pricePerUnit", "bid", "buyout", "stack". Optional.
						sortOrder: What order to sort in. One of "ascending" or "descending". Optional.
						text: A string to search for in the item name. Optional.
						type: Type of scan to perform. One of "search", "mine", or "bids". If "mine" or "bids", must be the only member in the table.
	Command.Buff.Cancel
		Function documentation:
			Cancels a buff on the player. Not all buffs are cancelable.
			This function is subject to the "global" command queue.
				Command.Buff.Cancel(buff)   -- buff
		Parameters:
				buff:	The ID of the buff to cancel.
	Command.Buff.Describe
		Function documentation:
			Requests a detailed description for a given buff.
			This function is subject to the "global" command queue.
				Command.Buff.Describe(unit, buff)   -- unit, buff
		Parameters:
				buff:	The ID of the buff to describe.
				unit:	The ID of the unit that the buff is on.
	Command.Cursor
		Function documentation:
			Changes the contents of the cursor. Ability cursors may be set only if the environment is not in secure mode.
				Command.Cursor(hold)   -- variant
		Parameters:
				hold:	The new cursor. Currently accepts ability, item, or itemtype IDs. Pass nil to clear the cursor.
	Command.Item.Destroy
		Function documentation:
			Destroys an item. Be careful: this really does destroy an item. There is no confirmation dialog and the process is irreversible. This cannot destroy items directly out of the guild bank.
			If interacting with an item in the player bank, requires the "bank" interaction flag to be set. If interacting with an item in the guild bank, requires the "guildbank" interaction flag to be set.
			This function is subject to the "global" command queue.
				Command.Item.Destroy(target)   -- item
		Parameters:
				target:	The item ID of the item to destroy.
	Command.Item.Move
		Function documentation:
			Moves an item from one location to another. This cannot move items directly between equipment, wardrobe, or guild bank - you'll have to stop off in the inventory first.
			If interacting with an item in the player bank, requires the "bank" interaction flag to be set. If interacting with an item in the guild bank, requires the "guildbank" interaction flag to be set.
			This function is subject to the "global" command queue.
				Command.Item.Move(source, destination)   -- item, slot
				Command.Item.Move(source, destination)   -- slot, slot
		Parameters:
				destination:	The location to move the item. May attempt to stack or swap if there is already an item here.
				source:	The item to move. Must be a slot specifier that refers to an actual item.
	Command.Item.Split
		Function documentation:
			Splits a number of items off a stack.
			If interacting with an item in the player bank, requires the "bank" interaction flag to be set. If interacting with an item in the guild bank, requires the "guildbank" interaction flag to be set.
			This function is subject to the "global" command queue.
				Command.Item.Split(source, stack)   -- item, number
				Command.Item.Split(source, stack)   -- slot, number
		Parameters:
				source:	The item to split. May be a slot specifier or an item ID.
				stack:	The number of items to move into the new stack. Must be a positive integer.
	Command.Mail.Delete
		Function documentation:
			Deletes a mail.
			Requires the "mail" interaction flag to be set.
			This function is subject to the "global" command queue.
				Command.Mail.Delete(mail)   -- mail
		Parameters:
				mail:	The ID of the mail to be targeted.
	Command.Mail.Open
		Function documentation:
			Opens a mail, retrieving detailed information for it.
			Requires the "mail" interaction flag to be set.
			This function is subject to the "global" command queue.
				Command.Mail.Open(mail)   -- mail
		Parameters:
				mail:	The ID of the mail to be targeted.
	Command.Mail.Pay
		Function documentation:
			Pays the COD fee on a mail.
			Requires the "mail" interaction flag to be set.
			This function is subject to the "global" command queue.
				Command.Mail.Pay(mail)   -- mail
		Parameters:
				mail:	The ID of the mail to be targeted.
	Command.Mail.Return
		Function documentation:
			Returns a mail to its sender.
			Requires the "mail" interaction flag to be set.
			This function is subject to the "global" command queue.
				Command.Mail.Return(mail)   -- mail
		Parameters:
				mail:	The ID of the mail to be targeted.
	Command.Mail.Send
		Function documentation:
			Sends mail.
			This function consumes a hardware event to function. Hardware events include MouseDown, MouseUp, and Wheel operations.
			Requires the "mail" interaction flag to be set.
				Command.Mail.Send(mail)   -- table
		Parameters:
				mail:	Table containing data about the mail to send.
						to: The name of the player to send mail to. Required.
						subject: The mail's subject. Required.
						count: The mail's body.
						cod: The money required for the recipient to remove attachments. Mutually exclusive with "coin".
						coin: The amount of money attached to this message. Mutually exclusive with "cod".
						attachments: A table listing the item IDs of the items you wish to attach. Maximum of 6.
	Command.Mail.Spam
		Function documentation:
			Marks mail as spam.
			Requires the "mail" interaction flag to be set.
			This function is subject to the "global" command queue.
				Command.Mail.Spam(mail)   -- mail
		Parameters:
				mail:	The ID of the mail to be targeted.
	Command.Mail.Take
		Function documentation:
			Takes an attached item from mail.
			Requires the "mail" interaction flag to be set.
			This function is subject to the "global" command queue.
				Command.Mail.Take(mail, item)   -- mail, item
		Parameters:
				item:	The ID of the item to be taken.
				mail:	The ID of the mail to be targeted.
	Command.Queue.Handler
		Function documentation:
			Sets the queue handler function. The queue handler function will be called when a Command.* function is called which relies on a queue for throttling and that queue is full. This function will be passed (queue, owner, func, ...). queue: The identifier of the queue that this function call will wait on. owner: The identifier of the addon that made the function call. func: The function call that has been queued. ...: The argument list that must be passed to func.
				Command.Queue.Handler(handler)   -- function
		Parameters:
				handler:	The new queue handler.
	Command.Slash.Register
		Function documentation:
			Registers a new chat slash command, inserts a new event table into the Event.Slash hierarchy, and returns that table. If called multiple times with the same slash command, will return the same table each time.
				eventTable = Command.Slash.Register(slashCommand)   -- table <- string
		Parameters:
				slashCommand:	The name of the slash command to register.
		Return values:
				eventTable:	The event table for your slash command. nil if the slash command could not be registered (usually because it conflicts with a built-in slash command.)
	Command.System.Flash
		Function documentation:
			Controls the flashing of the Rift taskbar icon.
				Command.System.Flash(flash)   -- boolean
		Parameters:
				flash:	Whether the taskbar icon should flash or not.
	Command.Tooltip
		Function documentation:
			Changes the displayed tooltip.
				Command.Tooltip(target)   -- variant
				Command.Tooltip(target, nil)   -- variant, nil
				Command.Tooltip(owner, buff)   -- unit, buff
		Parameters:
				buff:	The ID of a buff for the new tooltip.
				nil:	Optional placeholder nil.
				owner:	The ID of the owner of the buff.
				target:	The new tooltip. Currently accepts ability, item, itemtype, or unit IDs. Pass nil to clear the tooltip.
 
Utilities:
	Utility.Auction.Cost
		Function documentation:
			Returns the amount of silver it will cost to post a given auction.
				cost = Utility.Auction.Cost(item, time, bid, buyout)   -- number <- item, number, number, number/nil
		Parameters:
				bid:	The minimum bid for the new auction, in silver.
				buyout:	The buyout for the new auction, in silver. nil if no buyout is desired.
				item:	The ID of the item to be auctioned.
				time:	The duration that the auction should last, in hours. Valid values are limited to 12, 24, and 48.
		Return values:
				cost:	The cost of posting this auction, in silver.
	Utility.Dispatch
		Function documentation:
			Calls a function, crediting that function's execution and errors to a specific addon. Errors will be handled by the standard error handler and not relayed to the caller. Does not return anything.
				Utility.Dispatch(func, identifier, info)   -- function, string, string
		Parameters:
				func:	The function to call.
				identifier:	The identifier of the addon to credit execution time towards.
				info:	An info string to be included in error reports.
	Utility.Event.Create
		Function documentation:
			Creates a custom event. Takes an identifier and an event path as parameters. Called with Create("Identifier", "The.Event.Path") the event table will end up at Event.Identifier.The.Event.Path, and will behave like a standard Rift event table in every way. Undefined behavior if given an identifier or a path that conflicts with a built-in Rift event or an existing addon event.
				handle, event = Utility.Event.Create(identifier, event)   -- function, table <- string, string
		Parameters:
				event:	The event's name. "." characters will be treated as hierarchy delimeters.
				identifier:	The identifier of the addon creating this event.
		Return values:
				event:	The resulting event table.
				handle:	A handle used to trigger the event. Called with any selection of parameters, it will pass those parameters through to properly registered event handlers in order. Any errors caused by those event handlers will be caught and handled.
	Utility.Item.Slot.All
		Function documentation:
			Generates a slot specifier for all known items.
				slot = Utility.Item.Slot.All()   -- slot <- void
		Return values:
				slot:	The requested slot specifier.
	Utility.Item.Slot.Bank
		Function documentation:
			Generates a slot specifier for the player's bank.
				slot = Utility.Item.Slot.Bank()   -- slot <- void
				slot = Utility.Item.Slot.Bank(segment)   -- slot <- string
				slot = Utility.Item.Slot.Bank(segment)   -- slot <- number
				slot = Utility.Item.Slot.Bank(segment, slot)   -- slot <- string, number
				slot = Utility.Item.Slot.Bank(segment, slot)   -- slot <- number, number
		Parameters:
				segment:	Segment to inspect. Use "main" for the main bank area, "bag" for the bank bags, or a number starting at 1 for the contents of a specific bank bag.
				slot:	The slot ID, starting at 1.
		Return values:
				slot:	The requested slot specifier.
	Utility.Item.Slot.Equipment
		Function documentation:
			Generates a slot specifier for the player's equipment.
				slot = Utility.Item.Slot.Equipment()   -- slot <- void
				slot = Utility.Item.Slot.Equipment(slot)   -- slot <- string
		Parameters:
				slot:	The equipment slot to be used. Can be any of the following: "helmet", "shoulders", "chest", "gloves", "belt", "legs", "feet", "handmain", "handoff", "ranged", "neck", "trinket", "ring1", "ring2", "synergy", or "focus".
		Return values:
				slot:	The requested slot specifier.
	Utility.Item.Slot.Guild
		Function documentation:
			Generates a slot specifier for the player's guild bank.
				slot = Utility.Item.Slot.Guild()   -- slot <- void
				slot = Utility.Item.Slot.Guild(vault)   -- slot <- number
				slot = Utility.Item.Slot.Guild(vault, slot)   -- slot <- number, number
		Parameters:
				slot:	The slot ID, starting at 1.
				vault:	The vault ID to inspect. Starts at 1.
		Return values:
				slot:	The requested slot specifier.
	Utility.Item.Slot.Inventory
		Function documentation:
			Generates a slot specifier for the player's inventory.
				slot = Utility.Item.Slot.Inventory()   -- slot <- void
				slot = Utility.Item.Slot.Inventory(bag)   -- slot <- string
				slot = Utility.Item.Slot.Inventory(bag)   -- slot <- number
				slot = Utility.Item.Slot.Inventory(bag, slot)   -- slot <- string, number
				slot = Utility.Item.Slot.Inventory(bag, slot)   -- slot <- number, number
		Parameters:
				bag:	The number of the bag whose contents should be inspected, starting at 1, or "bag" to inspect the actual inventory bags.
				slot:	The slot ID, starting at 1.
		Return values:
				slot:	The requested slot specifier.
	Utility.Item.Slot.Parse
		Incorrect function usage.
		Function documentation:
			Parses a slot specifier, returning information on what it represents.
				type, parameter, parameter = Utility.Item.Slot.Parse(slot)   -- string, variant, variant <- slot
				type, parameter = Utility.Item.Slot.Parse(slot)   -- string, variant <- slot
				type = Utility.Item.Slot.Parse(slot)   -- string <- slot
				Utility.Item.Slot.Parse(slot)   -- slot
		Parameters:
				slot:	The slot ID, starting at 1.
		Return values:
				parameter:	A parameter for this slot type. Actual meaning depends on the type.
				type:	The type of this element.
	Utility.Item.Slot.Quest
		Function documentation:
			Generates a slot specifier for the player's quest bag.
				slot = Utility.Item.Slot.Quest()   -- slot <- void
				slot = Utility.Item.Slot.Quest(slot)   -- slot <- number
		Parameters:
				slot:	The slot ID, starting at 1.
		Return values:
				slot:	The requested slot specifier.
	Utility.Item.Slot.Wardrobe
		Function documentation:
			Generates a slot specifier for the player's wardrobe.
				slot = Utility.Item.Slot.Wardrobe()   -- slot <- void
				slot = Utility.Item.Slot.Wardrobe(costume)   -- slot <- number
				slot = Utility.Item.Slot.Wardrobe(costume, slot)   -- slot <- number, string
		Parameters:
				costume:	The number of the wardrobe costume to inspect, starting at 1.
				slot:	The equipment slot to be used. Can be any of the following: "helmet", "shoulders", "chest", "gloves", "legs", or "feet".
		Return values:
				slot:	The requested slot specifier.
	Utility.Mail.Cost
		Function documentation:
			Returns the amount of silver it will cost to send a given mail.
				cost = Utility.Mail.Cost(mail)   -- number <- table
		Parameters:
				mail:	The mail to check. In the same format as the parameter of Command.Mail.Send.
		Return values:
				cost:	The cost of sending this mail, in silver.
	Utility.Serialize.Inline
		Function documentation:
			Serializes a single parameter. Results in a string suitable for use as a parameter in Lua code. If the input is a table, it must not contain table cycles or non-tree structures.
				serialized = Utility.Serialize.Inline(element)   -- string <- variant
		Parameters:
				element:	Element to serialize.
		Return values:
				serialized:	String containing serialized output. May be nil if there was an error with the input.
 
Native frames:
	UI.Native.Ability
	UI.Native.Accolade
	UI.Native.Achievement
	UI.Native.AchievementPopup
	UI.Native.Adventure
	UI.Native.Ascend
	UI.Native.Attunement
	UI.Native.Auction
	UI.Native.Bag
	UI.Native.BagBank1
	UI.Native.BagBank2
	UI.Native.BagBank3
	UI.Native.BagBank4
	UI.Native.BagBank5
	UI.Native.BagBank6
	UI.Native.BagBank7
	UI.Native.BagBank8
	UI.Native.BagInventory1
	UI.Native.BagInventory2
	UI.Native.BagInventory3
	UI.Native.BagInventory4
	UI.Native.BagInventory5
	UI.Native.Bank
	UI.Native.BankGuild
	UI.Native.BarBottom1
	UI.Native.BarBottom2
	UI.Native.BarBottom3
	UI.Native.BarBottom4
	UI.Native.BarBottom5
	UI.Native.BarBottom6
	UI.Native.BarMain
	UI.Native.BarPet
	UI.Native.BarSide1
	UI.Native.BarSide2
	UI.Native.BarSide3
	UI.Native.BarSide4
	UI.Native.BarTemporary
	UI.Native.Breath
	UI.Native.Buffbar
	UI.Native.Castbar
	UI.Native.Character
	UI.Native.Chronicle
	UI.Native.Coinlock
	UI.Native.Console1
	UI.Native.Console2
	UI.Native.Console3
	UI.Native.Console4
	UI.Native.Console5
	UI.Native.Console6
	UI.Native.Console7
	UI.Native.ConsoleSetting
	UI.Native.Crafting
	UI.Native.Ctf
	UI.Native.Guest
	UI.Native.Guild
	UI.Native.GuildCharter
	UI.Native.Import
	UI.Native.Keybind
	UI.Native.Layout
	UI.Native.Lfg
	UI.Native.Loot
	UI.Native.Macro
	UI.Native.MacroIcon
	UI.Native.MacroSlash
	UI.Native.Mail
	UI.Native.MailRead
	UI.Native.MapMain
	UI.Native.MapMini
	UI.Native.MechanicPlayer
	UI.Native.MechanicTarget
	UI.Native.Menu
	UI.Native.MessageEvent
	UI.Native.MessageStandard
	UI.Native.MessageText
	UI.Native.MessageWarfront
	UI.Native.MessageZone
	UI.Native.Notification
	UI.Native.Notify
	UI.Native.PortraitFocus
	UI.Native.PortraitGroup1
	UI.Native.PortraitGroup2
	UI.Native.PortraitGroup3
	UI.Native.PortraitGroup4
	UI.Native.PortraitParty1Pet
	UI.Native.PortraitParty2Pet
	UI.Native.PortraitParty3Pet
	UI.Native.PortraitParty4Pet
	UI.Native.PortraitPet
	UI.Native.PortraitPlayer
	UI.Native.PortraitTarget
	UI.Native.PortraitTargetTarget
	UI.Native.Quest
	UI.Native.QuestStickies
	UI.Native.Question
	UI.Native.Raid
	UI.Native.RaidGroup1
	UI.Native.RaidGroup1Pet
	UI.Native.RaidGroup2
	UI.Native.RaidGroup2Pet
	UI.Native.RaidGroup3
	UI.Native.RaidGroup3Pet
	UI.Native.RaidGroup4
	UI.Native.RaidGroup4Pet
	UI.Native.RaidParty
	UI.Native.RaidPartyPet
	UI.Native.Reactive
	UI.Native.Recall
	UI.Native.Respec
	UI.Native.Rift
	UI.Native.Roll1
	UI.Native.Roll2
	UI.Native.Roll3
	UI.Native.Roll4
	UI.Native.Setting
	UI.Native.Social
	UI.Native.Soul
	UI.Native.Split
	UI.Native.Ticket
	UI.Native.Tip
	UI.Native.TipAlert
	UI.Native.Tooltip
	UI.Native.TooltipAnchor
	UI.Native.Trade
	UI.Native.Tray
	UI.Native.Treasure
	UI.Native.Trial
	UI.Native.Upgrade
	UI.Native.Warfront
	UI.Native.WarfrontLeaderboard
	UI.Native.World
 
Events:
	Event.Ability.Add
		Event documentation:
			Signals the addition of a player ability.
				Event.Ability.Add(abilities)
		Parameters:
			abilities: Lists the abilities that were added. Lookup table from ability ID to "true".
	Event.Ability.Cooldown.Begin
		Event documentation:
			Signals the start of an ability's cooldown.
				Event.Ability.Cooldown.Begin(cooldowns)
		Parameters:
			cooldowns: The abilities whose cooldown has been changed. The key is the ability ID, the value is the new cooldown. 0 indicates that the cooldown has finished.
	Event.Ability.Cooldown.End
		Event documentation:
			Signals the end of an ability's cooldown. All the values in the "cooldown" parameter will be 0.
				Event.Ability.Cooldown.End(cooldowns)
		Parameters:
			cooldowns: The abilities whose cooldown has been changed. The key is the ability ID, the value is the new cooldown. 0 indicates that the cooldown has finished.
	Event.Ability.Range.False
		Event documentation:
			Signals a player ability exiting range from its current target.
				Event.Ability.Range.False(abilities)
		Parameters:
			abilities: The abilities that have entered or exited range. The key is the ability ID, the value is whether they are currently in range.
	Event.Ability.Range.True
		Event documentation:
			Signals a player ability entering range from its current target.
				Event.Ability.Range.True(abilities)
		Parameters:
			abilities: The abilities that have entered or exited range. The key is the ability ID, the value is whether they are currently in range.
	Event.Ability.Remove
		Event documentation:
			Signals the removal of a player ability.
				Event.Ability.Remove(abilities)
		Parameters:
			abilities: Lists the abilities that were removed. Lookup table from ability ID to "false".
	Event.Ability.Target
		Event documentation:
			Signals a player ability changing its current target.
				Event.Ability.Target(abilities)
		Parameters:
			abilities: The abilities whose target has changed. The key is the ability ID, the value is the new target.
	Event.Ability.Usable.False
		Event documentation:
			Signals a player ability becoming unusable.
				Event.Ability.Usable.False(abilities)
		Parameters:
			abilities: The abilities whose usability has changed. The key is the ability ID, the value is the new usability.
	Event.Ability.Usable.True
		Event documentation:
			Signals a player ability becoming usable.
				Event.Ability.Usable.True(abilities)
		Parameters:
			abilities: The abilities whose usability has changed. The key is the ability ID, the value is the new usability.
	Event.Achievement.Complete
		Event documentation:
			Signals an achievement completing.
				Event.Achievement.Complete(achievement)
		Parameters:
			achievement: The ID of the achievement.
	Event.Achievement.Update
		Event documentation:
			Signals a change in an achievement's information.
				Event.Achievement.Update(achievements)
		Parameters:
			achievements: A lookup table of the achievements, in {id = true} format.
	Event.Addon.Load.Begin
		Event documentation:
			Signals the beginning of an addon's loading sequence.
				Event.Addon.Load.Begin(addonidentifier)
		Parameters:
			addonidentifier: The addon's identifier.
	Event.Addon.Load.End
		Event documentation:
			Signals the end of an addon's loading sequence. At this point, that addon is fully loaded and initialized.
				Event.Addon.Load.End(addonidentifier)
		Parameters:
			addonidentifier: The addon's identifier.
	Event.Addon.SavedVariables.Load.Begin
		Event documentation:
			Signals the beginning of an addon's saved variable loading.
				Event.Addon.SavedVariables.Load.Begin(addonidentifier)
		Parameters:
			addonidentifier: The addon's identifier.
	Event.Addon.SavedVariables.Load.End
		Event documentation:
			Signals the end of an addon's saved variable load.
				Event.Addon.SavedVariables.Load.End(addonidentifier)
		Parameters:
			addonidentifier: The addon's identifier.
		(1 handler)
	Event.Addon.SavedVariables.Save.Begin
		Event documentation:
			Signals the beginning of an addon's saved variable saving.
				Event.Addon.SavedVariables.Save.Begin(addonidentifier)
		Parameters:
			addonidentifier: The addon's identifier.
	Event.Addon.SavedVariables.Save.End
		Event documentation:
			Signals the end of an addon's saved variable saving.
				Event.Addon.SavedVariables.Save.End(addonidentifier)
		Parameters:
			addonidentifier: The addon's identifier.
	Event.Addon.Shutdown.Begin
		Event documentation:
			Signals the beginning of the shutdown sequence.
				Event.Addon.Shutdown.Begin()
	Event.Addon.Shutdown.End
		Event documentation:
			Signals the end of the shutdown sequence. This is the last event that will be sent.
				Event.Addon.Shutdown.End()
	Event.Addon.Startup.End
		Event documentation:
			Signals the end of the startup sequence. At this point, all addons are fully loaded and initialized.
				Event.Addon.Startup.End()
	Event.Auction.Scan
		Event documentation:
			Signals incoming auction data.
				Event.Auction.Scan(type, auctions)
		Parameters:
			type: A table containing information on this scan. In the same format as the parameter to Command.Auction.Scan().
			auctions: A lookup table of the auctions returned from this scan.
	Event.Buff.Add
		Event documentation:
			Signals new buffs on a unit.
				Event.Buff.Add(unit, buffs)
		Parameters:
			unit: The Unit ID of the unit involved.
			buffs: A lookup table containing the buffs involved.
	Event.Buff.Change
		Event documentation:
			Signals a change in existing buffs on a unit.
				Event.Buff.Change(unit, buffs)
		Parameters:
			unit: The Unit ID of the unit involved.
			buffs: A lookup table containing the buffs involved.
	Event.Buff.Description
		Event documentation:
			Signals a change in an existing buff's detailed description. Value of the key is "true" if detail is now available, "false" if it is no longer available.
				Event.Buff.Description(unit, buffs)
		Parameters:
			unit: The Unit ID of the unit involved.
			buffs: A lookup table containing the buffs involved.
	Event.Buff.Remove
		Event documentation:
			Signals removal of buffs from a unit.
				Event.Buff.Remove(unit, buffs)
		Parameters:
			unit: The Unit ID of the unit involved.
			buffs: A lookup table containing the buffs involved.
	Event.Chat.Notify
		Event documentation:
			Signals a screen notification. This is generally used as a warning mechanism during boss fights.
				Event.Chat.Notify(info)
		Parameters:
			info: Detailed information table about this event, containing several named parameters.
		Parameter members:
				message:	The text said.
	Event.Chat.Npc
		Event documentation:
			Signals an NPC speaking a line of text.
				Event.Chat.Npc(info)
		Parameters:
			info: Detailed information table about this event, containing several named parameters.
		Parameter members:
				from:	The unit ID of the speaker, if available.
				fromName:	The name of the speaker.
				message:	The text said.
	Event.Combat.Damage
		Event documentation:
			Signals damage done to a unit.
				Event.Combat.Damage(info)
		Parameters:
			info: Detailed information table about this event, containing several named parameters.
		Parameter members:
				ability:	The ability ID for the ability used, if available.
				abilityName:	The name of the ability used.
				caster:	The unit ID for this event's initiator, if one exists.
				casterName:	The name of this event's initiator, if available.
				crit:	Whether this was the result of a critical hit.
				damage:	The amount of damage actually done.
				damageAbsorbed:	The amount of damage absorbed.
				damageBlocked:	The amount of damage deflected.
				damageDeflected:	The amount of damage deflected.
				damageIntercepted:	The amount of damage intercepted.
				damageModified:	The amount of damage modified.
				overkill:	The amount of overkill done.
				target:	The unit ID for the target.
				targetName:	The name of the target, if available.
				type:	The damage type. Values include "life", "death", "air", "earth", "fire", "water".
	Event.Combat.Death
		Event documentation:
			Signals the death of a unit.
				Event.Combat.Death(info)
		Parameters:
			info: Detailed information table about this event, containing several named parameters.
		Parameter members:
				caster:	The unit ID for this event's initiator, if one exists.
				casterName:	The name of this event's initiator, if available.
				target:	The unit ID for the target.
				targetName:	The name of the target, if available.
	Event.Combat.Dodge
		Event documentation:
			Signals a unit dodging an ability.
				Event.Combat.Dodge(info)
		Parameters:
			info: Detailed information table about this event, containing several named parameters.
		Parameter members:
				ability:	The ability ID for the ability used, if available.
				abilityName:	The name of the ability used.
				caster:	The unit ID for this event's initiator, if one exists.
				casterName:	The name of this event's initiator, if available.
				target:	The unit ID for the target.
				targetName:	The name of the target, if available.
	Event.Combat.Heal
		Event documentation:
			Signals healing done to a unit.
				Event.Combat.Heal(info)
		Parameters:
			info: Detailed information table about this event, containing several named parameters.
		Parameter members:
				ability:	The ability ID for the ability used, if available.
				abilityName:	The name of the ability used.
				caster:	The unit ID for this event's initiator, if one exists.
				casterName:	The name of this event's initiator, if available.
				crit:	Whether this was the result of a critical hit.
				heal:	The amount healed.
				overheal:	The amount of healing past maximum health wasted.
				target:	The unit ID for the target.
				targetName:	The name of the target, if available.
	Event.Combat.Immune
		Event documentation:
			Signals a unit resisting an ability through immunity.
				Event.Combat.Immune(info)
		Parameters:
			info: Detailed information table about this event, containing several named parameters.
		Parameter members:
				ability:	The ability ID for the ability used, if available.
				abilityName:	The name of the ability used.
				caster:	The unit ID for this event's initiator, if one exists.
				casterName:	The name of this event's initiator, if available.
				target:	The unit ID for the target.
				targetName:	The name of the target, if available.
	Event.Combat.Miss
		Event documentation:
			Signals an ability's effect missing a unit.
				Event.Combat.Miss(info)
		Parameters:
			info: Detailed information table about this event, containing several named parameters.
		Parameter members:
				ability:	The ability ID for the ability used, if available.
				abilityName:	The name of the ability used.
				caster:	The unit ID for this event's initiator, if one exists.
				casterName:	The name of this event's initiator, if available.
				target:	The unit ID for the target.
				targetName:	The name of the target, if available.
	Event.Combat.Parry
		Event documentation:
			Signals a unit parrying an ability.
				Event.Combat.Parry(info)
		Parameters:
			info: Detailed information table about this event, containing several named parameters.
		Parameter members:
				ability:	The ability ID for the ability used, if available.
				abilityName:	The name of the ability used.
				caster:	The unit ID for this event's initiator, if one exists.
				casterName:	The name of this event's initiator, if available.
				target:	The unit ID for the target.
				targetName:	The name of the target, if available.
	Event.Combat.Resist
		Event documentation:
			Signals a unit resisting an ability.
				Event.Combat.Resist(info)
		Parameters:
			info: Detailed information table about this event, containing several named parameters.
		Parameter members:
				ability:	The ability ID for the ability used, if available.
				abilityName:	The name of the ability used.
				caster:	The unit ID for this event's initiator, if one exists.
				casterName:	The name of this event's initiator, if available.
				target:	The unit ID for the target.
				targetName:	The name of the target, if available.
	Event.Currency
		Event documentation:
			Signals a change in the player's available currency.
				Event.Currency(currencies)
		Parameters:
			currencies: New currency counts, in key/value form.
	Event.Cursor
		Event documentation:
			Signals that the cursor has changed.
				Event.Cursor(type, held)
		Parameters:
			type: The current cursor type. Valid values include "ability", "item", and "itemtype".
			held: The blob describing the new element held. Generally, some kind of identifier used in another part of the addon system.
	Event.Interaction
		Event documentation:
			Signals a change in available interaction types.
				Event.Interaction(interaction, state)
		Parameters:
			interaction: The identifier of the interaction type. May be any of "auction", "bank", "guildbank", or "mail".
			state: Boolean indicating whether or not that interaction is available.
	Event.Item.Slot
		Event documentation:
			Signals that the contents of an item slot have changed.
				Event.Item.Slot(updates)
		Parameters:
			updates: Lookup table of changes. Key is the slot identifier, value is an item ID, false if the slot is now empty, or the string "nil" if the slot no longer exists.
	Event.Item.Update
		Event documentation:
			Signals that an item has changed.
				Event.Item.Update(updates)
		Parameters:
			updates: Lookup table of changes. Key is the slot identifier, value is an item ID, false if the slot is now empty, or the string "nil" if the slot no longer exists.
	Event.Mail
		Event documentation:
			Signals a change in the available mail messages.
				Event.Mail(mail)
		Parameters:
			mail: The changed mail messages. Takes the form of a lookup table. The key is the mail ID, the value is "basic" to indicate basic information available about a piece of mail, "detail" to indicate detailed information available, or false to indicate no information available.
	Event.Mouse.Move
		Event documentation:
			Signals the mouse moving.
				Event.Mouse.Move(x, y)
		Parameters:
			x: The mouse's new X position.
			y: The mouse's new Y position.
	Event.Queue.Status
		Event documentation:
			Signals that a queue may have left or entered the throttled state.
				Event.Queue.Status(id)
		Parameters:
			id: The ID of the queue affected. To get the actual new state, use Inspect.Queue.Status().
	Event.Slash	(category for dynamically-created events)
	Event.Slash.dump
		(Slash event documentation TBI)
		(1 handler)
	Event.Slash.eventlog
		(Slash event documentation TBI)
	Event.Slash.framecap
		(Slash event documentation TBI)
	Event.Stat
		Event documentation:
			Signals a change in the player's stats.
				Event.Stat(stats)
		Parameters:
			stats: A lookup table from stat ID to stat value, containing the stats that changed.
	Event.System.Error
		Event documentation:
			Signals that an addon error has occurred. To prevent infinite loops, errors in handlers for this event may not result in further events being triggered.
				Event.System.Error(error)
		Parameters:
			error: Table containing error data.
		Parameter members:
				addon:	The identifier of the responsible addon. Used in error types event, frameEvent, dispatch, fileNotFound, fileLoad, and fileRun.
				axis:	The axis influenced by the error. Used in error types layoutLoop and layoutError.
				error:	The actual error message generated. Used in error types event, frameEvent, script, dispatch, fileLoad, and fileRun.
				event:	The name of the event responsible. Used in error types event, frameEvent, and internal.
				file:	The name of the file responsible. Used in error types fileNotFound, fileLoad, and fileRun.
				frame:	The name of the frame that the event was generated on. Used in error type frameEvent.
				info:	The info string provided as part of the event handler. Used in error types event and dispatch.
				script:	The exact script entered by the user. Used in error type script.
				stacktrace:	The stacktrace at the point of the error. Used in error types event, frameEvent, script, dispatch, fileRun, layoutLoop, and layoutError.
				type:	Error type. "event" indicates an error within a global event handler. "frameEvent" indicates an error within a frame event handler. "script" indicates an error within a user-entered /script. "dispatch" indicates an error within a Utility.Dispatch handler. "internal" indicates an error within Rift's code (hopefully you'll never see this). "fileNotFound" indicates a missing file when attempting to load an addon. "fileLoad" indicates a parse failure when attempting to load an addon. "fileRun" indicates an execution error when attempting to load an addon. "layoutLoop" indicates a dependency loop found when evaluating the layout. "layoutError" indicates an invalid position found when evaluating the layout.
		(1 handler)
	Event.System.Secure.Enter
		Event documentation:
			Signals that the system is entering Secure mode. Usually this is equivalent to entering combat. Functions that may not be called in Secure mode will be locked after this event is complete.
				Event.System.Secure.Enter()
	Event.System.Secure.Leave
		Event documentation:
			Signals that the system is leaving Secure mode. Usually this is equivalent to leaving combat. Functions that may not be called in Secure mode are unlocked just before this event fires.
				Event.System.Secure.Leave()
	Event.System.Update.Begin
		Event documentation:
			Signals the beginning of a frame render. This is your last chance to make UI changes for this frame.
				Event.System.Update.Begin()
		(1 handler)
	Event.System.Update.End
		Event documentation:
			Signals the end of a frame render.
				Event.System.Update.End()
		(1 handler)
	Event.TEMPORARY.Role
		Event documentation:
			Signals a change in the player's current role.
			This event is deprecated and will be removed in the future. It should not be used.
				Event.TEMPORARY.Role(role)
		Parameters:
			role: The ID of the new role.
	Event.Tooltip
		Event documentation:
			Signals that the tooltip has changed.
				Event.Tooltip(type, shown, buff)
		Parameters:
			type: The current tooltip type. Valid values include "ability", "buff", "item", "itemtype", and "unit".
			shown: The blob describing the new element shown. Generally, some kind of identifier used in another part of the addon system.
			buff: The ID of the tooltip's new buff. "shown" will be a unit in this case.
	Event.Unit.Add
		Event documentation:
			Signals the addition of units to unit specifiers. Always preceded by Event.Unit.Change.Remove. Triggers for unit IDs that have been removed from the specifier tree, but may not trigger for any children of those units. You may want to use LibUnitChange instead of this event.
				Event.Unit.Add(units)
		Parameters:
			units: Table of the units changed. Key is the unit ID, value is the unit specifier, or "false" if the unit now has no specifier.
	Event.Unit.Available
		Event documentation:
			Signals the availability of Inspect.Unit.Detail.
				Event.Unit.Available(units)
		Parameters:
			units: Table of the units changed. Key is the unit ID, value is the unit specifier, or "false" if the unit now has no specifier.
	Event.Unit.Castbar
		Event documentation:
			Signals a unit's castbar changing.
				Event.Unit.Castbar(units)
		Parameters:
			units: Table of the units changed. Key is the unit ID, value is a castbar visibility flag.
	Event.Unit.Detail.Afk
		Event documentation:
			Signals a unit's AFK flag changing. Will trigger only for partymembers.
				Event.Unit.Detail.Afk(units)
		Parameters:
			units: Table of the units changed. Key is the unit ID, value is the new value.
	Event.Unit.Detail.Aggro
		Event documentation:
			Signals a unit's aggro flag changing. Will trigger only for groupmembers.
				Event.Unit.Detail.Aggro(units)
		Parameters:
			units: Table of the units changed. Key is the unit ID, value is the new value, or "false" in place of nil.
	Event.Unit.Detail.Blocked
		Event documentation:
			Signals a unit's LOS-blocked flag changing. Will trigger only for groupmembers.
				Event.Unit.Detail.Blocked(units)
		Parameters:
			units: Table of the units changed. Key is the unit ID, value is the new value, or "false" in place of nil.
	Event.Unit.Detail.Charge
		Event documentation:
			Signals a unit's charge changing. Will trigger only for the player's unit ID.
				Event.Unit.Detail.Charge(units)
		Parameters:
			units: Table of the units changed. Key is the unit ID, value is the new value.
	Event.Unit.Detail.ChargeMax
		Event documentation:
			Signals a unit's charge maximum changing. Will trigger only for the player's unit ID.
				Event.Unit.Detail.ChargeMax(units)
		Parameters:
			units: Table of the units changed. Key is the unit ID, value is the new value.
	Event.Unit.Detail.Combat
		Event documentation:
			Signals a unit's combat status changing.
				Event.Unit.Detail.Combat(units)
		Parameters:
			units: Table of the units changed. Key is the unit ID, value is the new value.
	Event.Unit.Detail.Combo
		Event documentation:
			Signals a unit's combo points changing. Will trigger only for the player's unit ID.
				Event.Unit.Detail.Combo(units)
		Parameters:
			units: Table of the units changed. Key is the unit ID, value is the new value.
	Event.Unit.Detail.ComboUnit
		Event documentation:
			Signals a unit's combo point target changing. Will trigger only for the player's unit ID.
				Event.Unit.Detail.ComboUnit(units)
		Parameters:
			units: Table of the units changed. Key is the unit ID, value is the new value, or "false" in place of nil.
	Event.Unit.Detail.Energy
		Event documentation:
			Signals a unit's energy changing.
				Event.Unit.Detail.Energy(units)
		Parameters:
			units: Table of the units changed. Key is the unit ID, value is the new value, or "false" in place of nil.
	Event.Unit.Detail.EnergyMax
		Event documentation:
			Signals a unit's energy maximum changing.
				Event.Unit.Detail.EnergyMax(units)
		Parameters:
			units: Table of the units changed. Key is the unit ID, value is the new value, or "false" in place of nil.
	Event.Unit.Detail.Guild
		Event documentation:
			Signals a unit's guild changing.
				Event.Unit.Detail.Guild(units)
		Parameters:
			units: Table of the units changed. Key is the unit ID, value is the new value, or "false" in place of nil.
	Event.Unit.Detail.Health
		Event documentation:
			Signals a unit's health changing.
				Event.Unit.Detail.Health(units)
		Parameters:
			units: Table of the units changed. Key is the unit ID, value is the new value, or "false" in place of nil.
	Event.Unit.Detail.HealthCap
		Event documentation:
			Signals a unit's health cap changing.
				Event.Unit.Detail.HealthCap(units)
		Parameters:
			units: Table of the units changed. Key is the unit ID, value is the new value, or "false" in place of nil.
	Event.Unit.Detail.HealthMax
		Event documentation:
			Signals a unit's health maximum changing.
				Event.Unit.Detail.HealthMax(units)
		Parameters:
			units: Table of the units changed. Key is the unit ID, value is the new value, or "false" in place of nil.
	Event.Unit.Detail.Level
		Event documentation:
			Signals a unit's level changing.
				Event.Unit.Detail.Level(units)
		Parameters:
			units: Table of the units changed. Key is the unit ID, value is the new value, or "false" in place of nil.
	Event.Unit.Detail.LocationName
		Event documentation:
			Signals a unit's location name changing.
				Event.Unit.Detail.LocationName(units)
		Parameters:
			units: Table of the units changed. Key is the unit ID, value is the new value, or "false" in place of nil.
	Event.Unit.Detail.Mana
		Event documentation:
			Signals a unit's mana changing.
				Event.Unit.Detail.Mana(units)
		Parameters:
			units: Table of the units changed. Key is the unit ID, value is the new value, or "false" in place of nil.
	Event.Unit.Detail.ManaMax
		Event documentation:
			Signals a unit's mana maximum changing.
				Event.Unit.Detail.ManaMax(units)
		Parameters:
			units: Table of the units changed. Key is the unit ID, value is the new value, or "false" in place of nil.
	Event.Unit.Detail.Mark
		Event documentation:
			Signals a unit's mark changing.
				Event.Unit.Detail.Mark(units)
		Parameters:
			units: Table of the units changed. Key is the unit ID, value is the new value, or "false" in place of nil.
	Event.Unit.Detail.Name
		Event documentation:
			Signals a unit's name changing.
				Event.Unit.Detail.Name(units)
		Parameters:
			units: Table of the units changed. Key is the unit ID, value is the new value.
	Event.Unit.Detail.Offline
		Event documentation:
			Signals a unit's offline flag changing. Will trigger only for partymembers.
				Event.Unit.Detail.Offline(units)
		Parameters:
			units: Table of the units changed. Key is the unit ID, value is the new value.
	Event.Unit.Detail.Planar
		Event documentation:
			Signals a unit's planar charges changing. Will trigger only for the player or groupmembers.
				Event.Unit.Detail.Planar(units)
		Parameters:
			units: Table of the units changed. Key is the unit ID, value is the new value.
	Event.Unit.Detail.PlanarMax
		Event documentation:
			Signals a unit's maximum planar charges changing. Will trigger only for the player or groupmembers.
				Event.Unit.Detail.PlanarMax(units)
		Parameters:
			units: Table of the units changed. Key is the unit ID, value is the new value.
	Event.Unit.Detail.Power
		Event documentation:
			Signals a unit's power changing.
				Event.Unit.Detail.Power(units)
		Parameters:
			units: Table of the units changed. Key is the unit ID, value is the new value, or "false" in place of nil.
	Event.Unit.Detail.PublicSize
		Event documentation:
			Signals a unit's public group size or status changing.
				Event.Unit.Detail.PublicSize(units)
		Parameters:
			units: Table of the units changed. Key is the unit ID, value is the new value, or "false" in place of nil.
	Event.Unit.Detail.Pvp
		Event documentation:
			Signals a unit's PvP flag changing.
				Event.Unit.Detail.Pvp(units)
		Parameters:
			units: Table of the units changed. Key is the unit ID, value is the new value.
	Event.Unit.Detail.Ready
		Event documentation:
			Signals a unit's readycheck status changing.
				Event.Unit.Detail.Ready(units)
		Parameters:
			units: Table of the units changed. Key is the unit ID, value is the new value, or the string "nil" in place of nil.
	Event.Unit.Detail.Role
		Event documentation:
			Signals a unit's role changing. Will trigger only for the player or partymembers.
				Event.Unit.Detail.Role(units)
		Parameters:
			units: Table of the units changed. Key is the unit ID, value is the new value, or "false" in place of nil.
	Event.Unit.Detail.Tagged
		Event documentation:
			Signals a unit's tagged status changing.
				Event.Unit.Detail.Tagged(units)
		Parameters:
			units: Table of the units changed. Key is the unit ID, value is the new value, or "false" in place of nil.
	Event.Unit.Detail.TitlePrefix
		Event documentation:
			Signals a unit's localized title prefix changing. This event is deprecated and should not be used.
			This event is deprecated and will be removed in the future. It should not be used.
				Event.Unit.Detail.TitlePrefix(units)
		Parameters:
			units: Table of the units changed. Key is the unit ID, value is the new value, or "false" in place of nil.
	Event.Unit.Detail.TitlePrefixId
		Event documentation:
			Signals a unit's title prefix ID changing.
				Event.Unit.Detail.TitlePrefixId(units)
		Parameters:
			units: Table of the units changed. Key is the unit ID, value is the new value, or "false" in place of nil.
	Event.Unit.Detail.TitlePrefixName
		Event documentation:
			Signals a unit's localized title prefix changing.
				Event.Unit.Detail.TitlePrefixName(units)
		Parameters:
			units: Table of the units changed. Key is the unit ID, value is the new value, or "false" in place of nil.
	Event.Unit.Detail.TitleSuffix
		Event documentation:
			Signals a unit's localized title suffix changing. This event is deprecated and should not be used.
			This event is deprecated and will be removed in the future. It should not be used.
				Event.Unit.Detail.TitleSuffix(units)
		Parameters:
			units: Table of the units changed. Key is the unit ID, value is the new value, or "false" in place of nil.
	Event.Unit.Detail.TitleSuffixId
		Event documentation:
			Signals a unit's title suffix ID changing.
				Event.Unit.Detail.TitleSuffixId(units)
		Parameters:
			units: Table of the units changed. Key is the unit ID, value is the new value, or "false" in place of nil.
	Event.Unit.Detail.TitleSuffixName
		Event documentation:
			Signals a unit's localized title suffix changing.
				Event.Unit.Detail.TitleSuffixName(units)
		Parameters:
			units: Table of the units changed. Key is the unit ID, value is the new value, or "false" in place of nil.
	Event.Unit.Detail.Vitality
		Event documentation:
			Signals a unit's vitality changing. Will trigger only for the player or groupmembers.
				Event.Unit.Detail.Vitality(units)
		Parameters:
			units: Table of the units changed. Key is the unit ID, value is the new value.
	Event.Unit.Detail.Warfront
		Event documentation:
			Signals a unit's warfront flag changing. Will trigger only for partymembers.
				Event.Unit.Detail.Warfront(units)
		Parameters:
			units: Table of the units changed. Key is the unit ID, value is the new value.
	Event.Unit.Remove
		Event documentation:
			Signals the removal of units from unit specifiers. Always followed by Event.Unit.Change.Add. Triggers for unit IDs that have been removed from the specifier tree, but may not trigger for any children of those units. You may want to use LibUnitChange instead of this event.
				Event.Unit.Remove(units)
		Parameters:
			units: Table of the units changed. Key is the unit ID, value is the unit specifier, or "false" if the unit now has no specifier.
	Event.Unit.Unavailable
		Event documentation:
			Signals the unavailability of Inspect.Unit.Detail.
				Event.Unit.Unavailable(units)
		Parameters:
			units: Table of the units changed. Key is the unit ID, value is the unit specifier, or "false" if the unit now has no specifier.
 
UI:
	Layout:
		Members:
			GetBottom
				Function documentation:
					Retrieves the Y position of the bottom edge of this element.
						bottom = Layout:GetBottom()   -- number <- void
				Return values:
						bottom:	The Y position of the bottom edge of this element.
			GetBounds
				Function documentation:
					Retrieves the complete bounds of this element.
						left, top, right, bottom = Layout:GetBounds()   -- number, number, number, number <- void
				Return values:
						bottom:	The Y position of the bottom edge of this element.
						left:	The X position of the left edge of this element.
						right:	The X position of the right edge of this element.
						top:	The Y position of the top edge of this element.
			GetEventTable
				Function documentation:
					Retrieves the event table of this element. By default, this value is also stored in "this.Event".
						eventTable = Layout:GetEventTable()   -- table <- void
				Return values:
						eventTable:	The event table of this element.
			GetHeight
				Function documentation:
					Retrieves the height of this element.
						height = Layout:GetHeight()   -- number <- void
				Return values:
						height:	The height of this element.
			GetLeft
				Function documentation:
					Retrieves the X position of the left edge of this element.
						left = Layout:GetLeft()   -- number <- void
				Return values:
						left:	The X position of the left edge of this element.
			GetName
				Function documentation:
					Retrieves the name of this element.
						name = Layout:GetName()   -- string <- void
				Return values:
						name:	The name of this element, as provided by the addon that created it.
			GetOwner
				Function documentation:
					Retrieves the owner of this element.
						owner = Layout:GetOwner()   -- string <- void
				Return values:
						owner:	The owner of this element. Given as an addon identifier.
			GetRight
				Function documentation:
					Retrieves the X position of the right edge of this element.
						right = Layout:GetRight()   -- number <- void
				Return values:
						right:	The X position of the right edge of this element.
			GetTop
				Function documentation:
					Retrieves the Y position of the top edge of this element.
						top = Layout:GetTop()   -- number <- void
				Return values:
						top:	The Y position of the top edge of this element.
			GetType
				Function documentation:
					Retrieves the type of this element.
						type = Layout:GetType()   -- string <- void
				Return values:
						type:	The type of this element.
			GetWidth
				Function documentation:
					Retrieves the width of this element.
						width = Layout:GetWidth()   -- number <- void
				Return values:
						width:	The width of this element.
			ReadAll
				Function documentation:
					Read all set points and sizes from this frame.
						results = Layout:ReadAll()   -- table <- void
				Return values:
						results:	Result table. Contains data in the following format: {x = {size = (size), [(position)] = {layout = (layout), position = (position), offset = (offset)}}, y = (the same thing)}.
			ReadHeight
				Function documentation:
					Read a set height from this frame.
						height = Layout:ReadHeight()   -- number <- void
				Return values:
						height:	The parameter passed to SetHeight(), or nil if no such parameter has been passed.
			ReadPoint
				Function documentation:
					Read a set point from this frame. Must be given a single-axis coordinate.
						layout, position, offset = Layout:ReadPoint(coordinate)   -- Layout, number, number <- string
						layout, position, offset = Layout:ReadPoint(x, y)   -- Layout, number, number <- number/nil, number/nil
						origin, offset = Layout:ReadPoint(coordinate)   -- string, number <- string
						origin, offset = Layout:ReadPoint(x, y)   -- string, number <- number/nil, number/nil
				Parameters:
						coordinate:	Named coordinate. Must be a one-axis coordinate.
						x:	X coordinate of the point. Either this or Y must be nil.
						y:	Y coordinate of the point. Either this or X must be nil.
				Return values:
						layout:	The table that this point is pinned to.
						offset:	The offset in pixels from the source location to the actual location.
						origin:	The string "origin".
						position:	The position on "layout" that this point is pinned. 0 refers to the top or left edge, 1 refers to the bottom or right edge.
			ReadWidth
				Function documentation:
					Read a set width from this frame.
						width = Layout:ReadWidth()   -- number <- void
				Return values:
						width:	The parameter passed to SetWidth(), or nil if no such parameter has been passed.
		Events:
			Move
				Frame event documentation:
					Signals that the frame's vertices have moved.
						Layout.Event:Move()
			Size
				Frame event documentation:
					Signals that the frame's size has changed.
						Layout.Event:Size()
	Native: Inherits from Layout
		Members:
			GetLayer
				Function documentation:
					Gets the native item's layer order.
						layer = Native:GetLayer()   -- number <- void
				Return values:
						layer:	The render layer of this frame. See Frame:SetLayer for details.
			GetLoaded
				Function documentation:
					Gets whether or not this native element is loaded and rendering.
						loaded = Native:GetLoaded()   -- boolean <- void
				Return values:
						loaded:	true if it is loaded.
			GetSecureMode
				Function documentation:
					Get the native element's secure mode. See Frame:SetSecureMode() for details.
						secure = Native:GetSecureMode()   -- string <- void
				Return values:
						secure:	The current secure mode.
			GetStrata
				Function documentation:
					Gets the native item's strata. The strata determines render order on a coarser level than Layer does, as well as determining how far an element is brought to the front when clicked on.
						strata = Native:GetStrata()   -- string <- void
				Return values:
						strata:	The item's current strata.
			GetStrataList
				Function documentation:
					Gets a list of valid stratas for this native element.
						stratas = Native:GetStrataList()   -- table <- void
				Return values:
						stratas:	An array of valid stratas, in order.
			SetLayer
				Function documentation:
					Sets the frame layer for this native element. This can be any number. Frames are drawn in ascending order. If two frames have the same layer number, then the order of those frames is undefined, but guarantees no Z-fighting. Frames are always drawn after their parents.
					Not permitted on a frame with "restricted" SecureMode while the addon environment is secured.
						Native:SetLayer(layer)   -- number
				Parameters:
						layer:	The new layer for this frame.
			SetStrata
				Function documentation:
					Sets the strata for this native element.
					Not permitted on a frame with "restricted" SecureMode while the addon environment is secured.
						Native:SetStrata(layer)   -- string
				Parameters:
						layer:	The new layer for this frame.
		Events:
			Layer
				Frame event documentation:
					Signals a change in the item's layer.
						Native.Event:Layer()
			Loaded
				Frame event documentation:
					Signals a change in the item's loaded status.
						Native.Event:Loaded()
			Strata
				Frame event documentation:
					Signals a change in the item's strata.
						Native.Event:Strata()
	Element: Inherits from Layout
		Members:
			GetAlpha
				Function documentation:
					Gets the alpha multiplier of this frame.
						alpha = Element:GetAlpha()   -- number <- void
				Return values:
						alpha:	The alpha multiplier of this frame. 1 is fully opaque, 0 is fully transparent. This does not include multiplied alphas from this frame's parent - it's the exact value passed to SetAlpha.
			GetBackgroundColor
				Function documentation:
					Retrieves the background color of this frame.
						r, g, b, a = Element:GetBackgroundColor()   -- number, number, number, number <- void
				Return values:
						a:	Alpha. 1 is fully opaque, 0 is fully transparent.
						b:	Blue.
						g:	Green.
						r:	Red.
			GetKeyFocus
				Function documentation:
					Gets the key focus status.
						focus = Element:GetKeyFocus()   -- boolean <- void
				Return values:
						focus:	Whether this frame is the current key focus.
			GetMouseMasking
				Function documentation:
					Get the current mouse masking mode. See SetMouseMasking for details.
						mask = Element:GetMouseMasking()   -- string <- void
				Return values:
						mask:	The current mouse masking mode.
			GetVisible
				Function documentation:
					Gets the visibility flag for this frame.
						visible = Element:GetVisible()   -- boolean <- void
				Return values:
						visible:	This frame's visibility flag, as set by SetVisible. Does not check the visibility flags of the frame's parents.
			SetAlpha
				Function documentation:
					Sets the alpha transparency multiplier for this frame and its children.
						Element:SetAlpha(alpha)   -- number
				Parameters:
						alpha:	The new alpha multiplier. 1 is fully opaque, 0 is fully transparent.
			SetBackgroundColor
				Function documentation:
					Sets the background color of this frame.
						Element:SetBackgroundColor(r, g, b)   -- number, number, number
						Element:SetBackgroundColor(r, g, b, a)   -- number, number, number, number
				Parameters:
						a:	Alpha. 1 is fully opaque, 0 is fully transparent. Defaults to 1.
						b:	Blue.
						g:	Green.
						r:	Red.
			SetKeyFocus
				Function documentation:
					Sets the key focus status. Note that only one frame can be the key focus at a time. Focusing on another frame will automatically unset the current focus.
						Element:SetKeyFocus(focus)   -- boolean
				Parameters:
						focus:	The new key focus setting.
			SetMouseMasking
				Function documentation:
					Sets the frame's mouse masking mode.
					Not permitted on a frame with "restricted" SecureMode while the addon environment is secured.
						Element:SetMouseMasking(mask)   -- string
				Parameters:
						mask:	The new mouse masking mode. "full" is the standard mode, and means that creating any Left, Right, or movement-related mouse event will cause the frame to accept and consume any event from any of those types. "limited" causes the frame to accept and consume only events for buttons that have been hooked, so that hooking "LeftDown" will still pass Right mouse events through the frame. Note that hooking any keypress event will still consume MouseMove/In/Out events.
			SetVisible
				Function documentation:
					Sets the frame's visibility flag. If set to false, then this frame and all its children will not be rendered or accept mouse input.
					Not permitted on a frame with "restricted" SecureMode while the addon environment is secured.
						Element:SetVisible(visible)   -- boolean
				Parameters:
						visible:	The new visibility flag.
		Events:
			KeyDown
			KeyFocusGain
			KeyFocusLoss
			KeyType
			KeyUp
			LeftClick
			LeftDown
			LeftUp
			LeftUpoutside
			MiddleClick
			MiddleDown
			MiddleUp
			MiddleUpoutside
			Mouse4Click
			Mouse4Down
			Mouse4Up
			Mouse4Upoutside
			Mouse5Click
			Mouse5Down
			Mouse5Up
			Mouse5Upoutside
			MouseIn
			MouseMove
			MouseOut
			RightClick
			RightDown
			RightUp
			RightUpoutside
			WheelBack
			WheelForward
	Frame: Inherits from Element
		Members:
			ClearAll
				Function documentation:
					Clear all set points and sizes from this frame.
					Not permitted on a frame with "restricted" SecureMode while the addon environment is secured.
						Frame:ClearAll()   -- void
			ClearHeight
				Function documentation:
					Clear a set height from this frame.
					Not permitted on a frame with "restricted" SecureMode while the addon environment is secured.
						Frame:ClearHeight()   -- void
			ClearPoint
				Function documentation:
					Clear a set point from this frame.
					Not permitted on a frame with "restricted" SecureMode while the addon environment is secured.
						Frame:ClearPoint(coordinate)   -- string
						Frame:ClearPoint(x, y)   -- number/nil, number/nil
				Parameters:
						coordinate:	Named coordinate.
						x:	X coordinate of the point.
						y:	Y coordinate of the point.
			ClearWidth
				Function documentation:
					Clear a set width from this frame.
					Not permitted on a frame with "restricted" SecureMode while the addon environment is secured.
						Frame:ClearWidth()   -- void
			GetLayer
				Function documentation:
					Gets the frame's layer order.
						layer = Frame:GetLayer()   -- number <- void
				Return values:
						layer:	The render layer of this frame. See Frame:SetLayer for details.
			GetMouseoverUnit
				Function documentation:
					Gets the unit that is being represented by this frame.
						unit = Frame:GetMouseoverUnit()   -- string <- void
				Return values:
						unit:	The current mouseover unit. May be nil if there is no mouseover unit.
			GetParent
				Function documentation:
					Gets the parent of this frame.
						parent = Frame:GetParent()   -- Element <- void
				Return values:
						parent:	The parent element of this frame.
			GetSecureMode
				Function documentation:
					Get the current secure mode. See SetSecureMode for details.
						secure = Frame:GetSecureMode()   -- string <- void
				Return values:
						secure:	The current secure mode.
			GetStrata
				Function documentation:
					Gets the frame's strata. The strata determines render order on a coarser level than Layer does, as well as determining how far an element is brought to the front when clicked on.
						strata = Frame:GetStrata()   -- string <- void
				Return values:
						strata:	The item's current strata.
			GetStrataList
				Function documentation:
					Gets a list of valid stratas for this frame.
						stratas = Frame:GetStrataList()   -- table <- void
				Return values:
						stratas:	An array of valid stratas, in order.
			SetAllPoints
				Function documentation:
					Pins all the edges of this frame to the edges of a different frame. If no target is given, defaults to this frame's parent.
					Not permitted on a frame with "restricted" SecureMode while the addon environment is secured.
						Frame:SetAllPoints()   -- void
						Frame:SetAllPoints(target)   -- Layout
				Parameters:
						target:	Target Layout to pin this frame's edges to.
			SetHeight
				Function documentation:
					Sets the height of this frame. Undefined results if the frame already has two pinned Y coordinates.
					Not permitted on a frame with "restricted" SecureMode while the addon environment is secured.
						Frame:SetHeight(height)   -- number
				Parameters:
						height:	The new height of this frame.
			SetLayer
				Function documentation:
					Sets the frame layer for this frame. This can be any number. Frames are drawn in ascending order. If two frames have the same layer number, then the order of those frames is undefined, but guarantees no Z-fighting. Frames are always drawn after their parents.
					Not permitted on a frame with "restricted" SecureMode while the addon environment is secured.
						Frame:SetLayer(layer)   -- number
				Parameters:
						layer:	The new layer for this frame.
			SetMouseoverUnit
				Function documentation:
					Sets the unit that will be represented by this frame.
					Permitted only on a frame with "restricted" SecureMode while the addon environment is not secured.
						Frame:SetMouseoverUnit(unit)   -- string
						Frame:SetMouseoverUnit(unit)   -- nil
				Parameters:
						unit:	The new mouseover unit. May be a unit ID or a unit specifier. Pass in nil to disable the mouseover effect.
			SetParent
				Function documentation:
					Sets the parent of this frame. Circular dependencies result in undefined behavior. If this frame's secure mode is "restricted", then its parent must also have a secure mode of "restricted".
					Not permitted on a frame with "restricted" SecureMode while the addon environment is secured.
						Frame:SetParent(parent)   -- Element
				Parameters:
						parent:	The new parent for this frame.
			SetPoint
				Function documentation:
					Pins a point on this frame to a location on another frame. This is a rather complex function and you should look at examples to see how to use it.
					This function can take many different forms. In general, it looks like this: SetPoint(point_on_this_frame, target_frame, point_on_target_frame [, x_offset, y_offset]).
					The first part is the point on this frame that will be attached. Usually, these are string identifiers. "TOPLEFT", "TOPCENTER", "TOPRIGHT", "CENTERLEFT", "CENTER", "CENTERRIGHT", "BOTTOMLEFT", "BOTTOMCENTER", "BOTTOMRIGHT". You may also use a string identifier that refers to a single axis - "TOP", "BOTTOM", "LEFT", "RIGHT", "CENTERX", "CENTERY". If you want more direct numeric control you can use number pairs. 0,0 is equivalent to "TOPLEFT", 1,1 is equivalent to "BOTTOMRIGHT", 0.5,nil is equivalent to "CENTERX".
					The second part is the frame to attach to, as well as the point on that frame to attach to. The frame is simply passing in the frame table. The point is the same identifier or number pair as the first parameter.
					Optionally, you may include an X or Y offset to the point.
					This connection is permanent, and if the target frame moves, this frame will move along with it. 
					Caveat: If the target is a frame set to the "restricted" SecureMode, and the client is currently in "secure" mode, then unexpected behavior may occur.
					Not permitted on a frame with "restricted" SecureMode while the addon environment is secured.
						Frame:SetPoint(...)   -- ...
				Parameters:
						...:	This function's parameters are complicated. More details will be forthcoming.
			SetSecureMode
				Function documentation:
					Sets the frame's secure mode.
					"normal" is the standard mode. It allows for most functionality to be used and does not restrict frames in combat. "restricted" allows for certain sensitive functions to be called, but disables a significant amount of functionality in combat. In order to change a frame to "restricted", its parent must already be "restricted". Note that a "restricted" frame can still have "normal" children.
					If you are not planning to use any restricted functions, your frame should remain in normal mode.
						Frame:SetSecureMode(secure)   -- string
				Parameters:
						secure:	The new secure mode. Valid inputs are "normal" and "restricted".
			SetStrata
				Function documentation:
					Sets the strata for this frame.
					Not permitted on a frame with "restricted" SecureMode while the addon environment is secured.
						Frame:SetStrata(strata)   -- string
				Parameters:
						strata:	The item's new strata. Must be one of the elements returned by :GetStrataList().
			SetWidth
				Function documentation:
					Sets the width of this frame. Undefined results if the frame already has two pinned X coordinates.
					Not permitted on a frame with "restricted" SecureMode while the addon environment is secured.
						Frame:SetWidth(width)   -- number
				Parameters:
						width:	The new width of this frame.
		Events:
			Layer
				Frame event documentation:
					Signals a change in the item's layer.
						Frame.Event:Layer()
			Strata
				Frame event documentation:
					Signals a change in the item's strata.
						Frame.Event:Strata()
	Context: Inherits from Frame
		Members:
			(No extra members)
		Events:
			(No extra events)
	Mask: Inherits from Frame
		Members:
			(No extra members)
		Events:
			(No extra events)
	Text: Inherits from Frame
		Members:
			GetFont
				Function documentation:
					Gets the current font used for this element.
						source, font = Text:GetFont()   -- string, string <- void
				Return values:
						font:	The actual font identifier. Either a resource identifier or a filename.
						source:	The source of the resource. "Rift" will take the resource from Rift's internal data. Anything else will take the resource from the addon with that identifier.
			GetFontColor
				Function documentation:
					Gets the current font color for this element.
						r, g, b, a = Text:GetFontColor()   -- number, number, number, number <- void
				Return values:
						a:	Alpha. 1 is fully opaque, 0 is fully transparent.
						b:	Blue.
						g:	Green.
						r:	Red.
			GetFontSize
				Function documentation:
					Gets the font size of the current element.
						fontsize = Text:GetFontSize()   -- number <- void
				Return values:
						fontsize:	The current font size of this element.
			GetFullHeight
				Function documentation:
					Get the height that would be required for this element to display all lines of text.
					This function is deprecated and will be removed in the future. It should not be used.
						height = Text:GetFullHeight()   -- number <- void
				Return values:
						height:	The element height needed to display all lines of text.
			GetFullWidth
				Function documentation:
					Get the width that would be required for this element to avoid word wrapping or truncation.
					This function is deprecated and will be removed in the future. It should not be used.
						width = Text:GetFullWidth()   -- number <- void
				Return values:
						width:	The element width needed to avoid word wrapping or truncation.
			GetText
				Function documentation:
					Get the current text for this element.
						text = Text:GetText()   -- string <- void
				Return values:
						text:	The current text of the element.
			GetWordwrap
				Function documentation:
					Gets the wordwrap flag for this element.
						wordwrap = Text:GetWordwrap()   -- boolean <- void
				Return values:
						wordwrap:	The current wordwrap flag for this element. If false, long lines will be truncated. Defaults to false.
			ResizeToText
				Function documentation:
					Sets the element's width and height to display all text without wordwrapping or truncation.
					Not permitted on a frame with "restricted" SecureMode while the addon environment is secured.
					This function is deprecated and will be removed in the future. It should not be used.
						Text:ResizeToText()   -- void
			SetFont
				Function documentation:
					Sets the current font used for this element.
						Text:SetFont(source, font)   -- string, string
				Parameters:
						font:	The actual font identifier. Either a resource identifier or a filename.
						source:	The source of the resource. "Rift" will take the resource from Rift's internal data. Anything else will take the resource from the addon with that identifier.
			SetFontColor
				Function documentation:
					Sets the current font color for this element.
						Text:SetFontColor(r, g, b)   -- number, number, number
						Text:SetFontColor(r, g, b, a)   -- number, number, number, number
				Parameters:
						a:	Alpha. 1 is fully opaque, 0 is fully transparent. Defaults to 1.
						b:	Blue.
						g:	Green.
						r:	Red.
			SetFontSize
				Function documentation:
					Sets the current font size of this element.
						Text:SetFontSize(fontsize)   -- number
				Parameters:
						fontsize:	The new font size of this element.
			SetText
				Function documentation:
					Sets the current text for this element.
						Text:SetText(text)   -- string
				Parameters:
						text:	The new text for the element.
			SetWordwrap
				Function documentation:
					Sets the wordwrap flag for this element.
						Text:SetWordwrap(wordwrap)   -- boolean
				Parameters:
						wordwrap:	The new wordwrap flag for this element. If false, long lines will be truncated. Defaults to false.
		Events:
			(No extra events)
	Texture: Inherits from Frame
		Members:
			GetTexture
				Function documentation:
					Gets the current texture used for this element.
						source, texture = Texture:GetTexture()   -- string, string <- void
				Return values:
						source:	The source of the resource. "Rift" will take the resource from Rift's internal data. Anything else will take the resource from the addon with that identifier.
						texture:	The actual texture identifier. Either a resource identifier or a filename.
			GetTextureHeight
				Function documentation:
					Returns the actual pixel height of the current texture.
						height = Texture:GetTextureHeight()   -- number <- void
				Return values:
						height:	The height of the current texture in pixels.
			GetTextureWidth
				Function documentation:
					Returns the actual pixel width of the current texture.
						width = Texture:GetTextureWidth()   -- number <- void
				Return values:
						width:	The width of the current texture in pixels.
			ResizeToTexture
				Function documentation:
					Sets the element's width and height to the exact pixel size of the texture.
					Not permitted on a frame with "restricted" SecureMode while the addon environment is secured.
					This function is deprecated and will be removed in the future. It should not be used.
						Texture:ResizeToTexture()   -- void
			SetTexture
				Function documentation:
					Sets the current texture used for this element.
						Texture:SetTexture(source, texture)   -- string, string
				Parameters:
						source:	The source of the resource. "Rift" will take the resource from Rift's internal data. Anything else will take the resource from the addon with that identifier.
						texture:	The actual texture identifier. Either a resource identifier or a filename.
		Events:
			(No extra events)
	RiftButton: Inherits from Frame
		Members:
			GetDefaultHeight
				Function documentation:
					Returns the default height of Rift buttons.
					This function is deprecated and will be removed in the future. It should not be used.
						height = RiftButton:GetDefaultHeight()   -- number <- void
				Return values:
						height:	Default button height.
			GetDefaultWidth
				Function documentation:
					Returns the default width of Rift buttons.
					This function is deprecated and will be removed in the future. It should not be used.
						width = RiftButton:GetDefaultWidth()   -- number <- void
				Return values:
						width:	Default button width.
			GetEnabled
				Function documentation:
					Gets whether the button is enabled or grayed out.
						enabled = RiftButton:GetEnabled()   -- boolean <- void
				Return values:
						enabled:	The current enable state of this item.
			GetSkin
				Function documentation:
					Gets the current skin of this item.
						skin = RiftButton:GetSkin()   -- string <- void
				Return values:
						skin:	The current skin. Possible results include "default" and "close".
			GetText
				Function documentation:
					Gets this button's text.
						text = RiftButton:GetText()   -- string <- void
				Return values:
						text:	The current text of the element.
			ResizeToDefault
				Function documentation:
					Resizes this button to its default width and height.
					Not permitted on a frame with "restricted" SecureMode while the addon environment is secured.
					This function is deprecated and will be removed in the future. It should not be used.
						RiftButton:ResizeToDefault()   -- void
			SetEnabled
				Function documentation:
					Sets whether the button is enabled or grayed out.
						RiftButton:SetEnabled(enabled)   -- boolean
				Parameters:
						enabled:	The new enable state of this item.
			SetSkin
				Function documentation:
					Sets the current skin of this item.
						RiftButton:SetSkin(skin)   -- string
				Parameters:
						skin:	The new skin. Possible values are "default" and "close".
			SetText
				Function documentation:
					Sets this button's text.
						RiftButton:SetText(text)   -- string
				Parameters:
						text:	The new text for the element.
		Events:
			LeftPress
				Frame event documentation:
					Signals that the button has been pressed. Equivalent to LeftClick, but trigger onlyed while the button is enabled.
						RiftButton.Event:LeftPress()
	RiftCheckbox: Inherits from Frame
		Members:
			GetChecked
				Function documentation:
					Gets whether the button is checked or not.
						checked = RiftCheckbox:GetChecked()   -- boolean <- void
				Return values:
						checked:	The current checked state of this item.
			GetDefaultHeight
				Function documentation:
					Returns the default height of Rift checkboxes.
					This function is deprecated and will be removed in the future. It should not be used.
						height = RiftCheckbox:GetDefaultHeight()   -- number <- void
				Return values:
						height:	Default button height.
			GetDefaultWidth
				Function documentation:
					Returns the default width of Rift checkboxes.
					This function is deprecated and will be removed in the future. It should not be used.
						width = RiftCheckbox:GetDefaultWidth()   -- number <- void
				Return values:
						width:	Default button width.
			GetEnabled
				Function documentation:
					Gets whether the checkbox is enabled or grayed out.
						enabled = RiftCheckbox:GetEnabled()   -- boolean <- void
				Return values:
						enabled:	The current enable state of this item.
			ResizeToDefault
				Function documentation:
					Resizes this checkbox to its default width and height.
					Not permitted on a frame with "restricted" SecureMode while the addon environment is secured.
					This function is deprecated and will be removed in the future. It should not be used.
						RiftCheckbox:ResizeToDefault()   -- void
			SetChecked
				Function documentation:
					Sets whether the checkbox is checked or not.
						RiftCheckbox:SetChecked(checked)   -- boolean
				Parameters:
						checked:	The new checked state of this item.
			SetEnabled
				Function documentation:
					Sets whether the checkbox is enabled or grayed out.
						RiftCheckbox:SetEnabled(enabled)   -- boolean
				Parameters:
						enabled:	The new enable state of this item.
		Events:
			CheckboxChange
				Frame event documentation:
					Signals that the checkbox's checked state has changed.
						RiftCheckbox.Event:CheckboxChange()
	RiftScrollbar: Inherits from Frame
		Members:
			GetEnabled
				Function documentation:
					Gets whether the scrollbar is enabled or disabled.
						enabled = RiftScrollbar:GetEnabled()   -- boolean <- void
				Return values:
						enabled:	The current enable state of this item.
			GetOrientation
				Function documentation:
					Gets the current orientation of the scrollbar.
						orientation = RiftScrollbar:GetOrientation()   -- string <- void
				Return values:
						orientation:	The current orientation. Valid results include "vertical" and "horizontal".
			GetPosition
				Function documentation:
					Returns the current position of the scrollbar.
						position = RiftScrollbar:GetPosition()   -- number <- void
				Return values:
						position:	The current position of this scrollbar.
			GetRange
				Function documentation:
					Returns the current range of the scrollbar.
						minimum, maximum = RiftScrollbar:GetRange()   -- number, number <- void
				Return values:
						maximum:	The maximum value for the position of this slider.
						minimum:	The minimum value for the position of this slider.
			GetThickness
				Function documentation:
					Returns the thickness of the scrollbar handle. Size is relative to the range.
						thickness = RiftScrollbar:GetThickness()   -- number <- void
				Return values:
						thickness:	The thickness of the handle.
			Nudge
				Function documentation:
					Modify the scrollbar position, clamped to the current bounds.
						RiftScrollbar:Nudge(offset)   -- number
				Parameters:
						offset:	The amount to nudge.
			NudgeDown
				Function documentation:
					Shift the scrollbar down (i.e. away from zero) by a standard amount.
						RiftScrollbar:NudgeDown()   -- void
			NudgeUp
				Function documentation:
					Shift the scrollbar up (i.e. towards zero) by a standard amount.
						RiftScrollbar:NudgeUp()   -- void
			SetEnabled
				Function documentation:
					Sets whether the scrollbar is enabled or disabled.
						RiftScrollbar:SetEnabled(enabled)   -- boolean
				Parameters:
						enabled:	The new enable state of this item.
			SetOrientation
				Function documentation:
					Sets the orientation of the scrollbar.
						RiftScrollbar:SetOrientation(orientation)   -- string
				Parameters:
						orientation:	The new orientation. Must be either "vertical" or "horizontal".
			SetPosition
				Function documentation:
					Changes the current position of the scrollbar.
						RiftScrollbar:SetPosition(position)   -- number
				Parameters:
						position:	The new position of this scrollbar. Must be within the current range.
			SetRange
				Function documentation:
					Changes the current range of the scrollbar.
						RiftScrollbar:SetRange(minimum, maximum)   -- number, number
				Parameters:
						maximum:	The new maximum value for the position of this slider. Must be an integer and larger than "minimum".
						minimum:	The new minimum value for the position of this slider. Must be an integer and smaller than "maximum".
			SetThickness
				Function documentation:
					Sets the current thickness of the scrollbar handle. Size is relative to the range.
						RiftScrollbar:SetThickness(thickness)   -- number
				Parameters:
						thickness:	The new thickness of the handle.
		Events:
			ScrollbarChange
				Frame event documentation:
					Signals a change in the scrollbar position.
						RiftScrollbar.Event:ScrollbarChange()
			ScrollbarGrab
				Frame event documentation:
					Signals the user grabbing the scrollbar with the mouse.
						RiftScrollbar.Event:ScrollbarGrab()
			ScrollbarRelease
				Frame event documentation:
					Signals the user releasing the scrollbar.
						RiftScrollbar.Event:ScrollbarRelease()
	RiftSlider: Inherits from Frame
		Members:
			GetDefaultHeight
				Function documentation:
					Returns the default height of Rift sliders.
					This function is deprecated and will be removed in the future. It should not be used.
						height = RiftSlider:GetDefaultHeight()   -- number <- void
				Return values:
						height:	Default button height.
			GetDefaultWidth
				Function documentation:
					Returns the default width of Rift sliders.
					This function is deprecated and will be removed in the future. It should not be used.
						width = RiftSlider:GetDefaultWidth()   -- number <- void
				Return values:
						width:	Default button width.
			GetEnabled
				Function documentation:
					Gets whether the slider is enabled or grayed out.
						enabled = RiftSlider:GetEnabled()   -- boolean <- void
				Return values:
						enabled:	The current enable state of this item.
			GetPosition
				Function documentation:
					Returns the current position of the slider.
						position = RiftSlider:GetPosition()   -- number <- void
				Return values:
						position:	The current position of this slider.
			GetRange
				Function documentation:
					Returns the current range of the slider.
						minimum, maximum = RiftSlider:GetRange()   -- number, number <- void
				Return values:
						maximum:	The maximum value for the position of this slider.
						minimum:	The minimum value for the position of this slider.
			ResizeToDefault
				Function documentation:
					Resizes this slider to its default width and height.
					Not permitted on a frame with "restricted" SecureMode while the addon environment is secured.
					This function is deprecated and will be removed in the future. It should not be used.
						RiftSlider:ResizeToDefault()   -- void
			SetEnabled
				Function documentation:
					Sets whether the slider is enabled or grayed out.
						RiftSlider:SetEnabled(enabled)   -- boolean
				Parameters:
						enabled:	The new enable state of this item.
			SetPosition
				Function documentation:
					Changes the current position of the slider.
						RiftSlider:SetPosition(position)   -- number
				Parameters:
						position:	The new position of this slider. Must be within the current range.
			SetRange
				Function documentation:
					Sets the current range of the slider.
						RiftSlider:SetRange(minimum, maximum)   -- number, number
				Parameters:
						maximum:	The new maximum value for the position of this slider. Must be an integer and larger than "minimum".
						minimum:	The new minimum value for the position of this slider. Must be an integer and smaller than "maximum".
		Events:
			SliderChange
				Frame event documentation:
					Signals a change in the slider position.
						RiftSlider.Event:SliderChange()
			SliderGrab
				Frame event documentation:
					Signals the user grabbing the slider with the mouse.
						RiftSlider.Event:SliderGrab()
			SliderRelease
				Frame event documentation:
					Signals the user releasing the slider.
						RiftSlider.Event:SliderRelease()
	RiftTextfield: Inherits from Frame
		Members:
			GetCursor
				Function documentation:
					Returns the current position of the cursor.
						cursor = RiftTextfield:GetCursor()   -- number <- void
				Return values:
						cursor:	The current position of this cursor. 0 indicates a cursor placed before any text.
			GetDefaultHeight
				Function documentation:
					Returns the default height of Rift textfields.
					This function is deprecated and will be removed in the future. It should not be used.
						height = RiftTextfield:GetDefaultHeight()   -- number <- void
				Return values:
						height:	Default textfield height.
			GetDefaultWidth
				Function documentation:
					Returns the default width of Rift textfields.
					This function is deprecated and will be removed in the future. It should not be used.
						width = RiftTextfield:GetDefaultWidth()   -- number <- void
				Return values:
						width:	Default textfield width.
			GetSelection
				Function documentation:
					Returns the current bounds of the selected text.
						begin, end = RiftTextfield:GetSelection()   -- number, number <- void
				Return values:
						begin:	The beginning of the selected text, in the same format GetCursor uses. nil if there is no text selected.
						end:	The end of the selected text, in the same format GetCursor uses. nil if there is no text selected.
			GetSelectionText
				Function documentation:
					Get the current selected text for this element. Returns nil if no text has been selected.
						text = RiftTextfield:GetSelectionText()   -- string <- void
				Return values:
						text:	The current text of the element.
			GetText
				Function documentation:
					Get the current text for this element.
						text = RiftTextfield:GetText()   -- string <- void
				Return values:
						text:	The current text of the element.
			SetCursor
				Function documentation:
					Changes the current position of the cursor.
						RiftTextfield:SetCursor(cursor)   -- number
				Parameters:
						cursor:	The new position of this cursor. Must be within the valid range.
			SetSelection
				Function documentation:
					Sets the current bounds of the selected text. Call with no arguments to remove the current selection.
						RiftTextfield:SetSelection()   -- void
						RiftTextfield:SetSelection(begin, end)   -- number, number
				Parameters:
						begin:	The new beginning of the selected text, in the same format SetCursor uses. Must be an integer and smaller than "end".
						end:	The new end of the selected text, in the same format SetCursor uses. Must be an integer and larger than "begin".
			SetText
				Function documentation:
					Set the current text for this element.
						RiftTextfield:SetText(text)   -- string
				Parameters:
						text:	The new text for the element.
		Events:
			TextfieldChange
				Frame event documentation:
					Signals that the textfield's text has changed.
						RiftTextfield.Event:TextfieldChange()
			TextfieldSelect
				Frame event documentation:
					Signals that the textfield's selection has changed.
						RiftTextfield.Event:TextfieldSelect()
	RiftWindow: Inherits from Frame
		Members:
			GetBorder
				Function documentation:
					Gets the element representing the window border.
						border = RiftWindow:GetBorder()   -- Element <- void
				Return values:
						border:	The window border.
			GetContent
				Function documentation:
					Gets the element representing the window content area.
						content = RiftWindow:GetContent()   -- Element <- void
				Return values:
						content:	The window content area.
			GetController
				Function documentation:
					Gets the ID of the current controller for this window.
						controller = RiftWindow:GetController()   -- string <- void
				Return values:
						controller:	"border" or "content", whichever dictates the dimensions of the other.
			GetDefaultHeight
				Function documentation:
					Returns the default height of Rift windows.
					This function is deprecated and will be removed in the future. It should not be used.
						height = RiftWindow:GetDefaultHeight()   -- number <- void
				Return values:
						height:	Default window height.
			GetDefaultWidth
				Function documentation:
					Returns the default width of Rift windows.
					This function is deprecated and will be removed in the future. It should not be used.
						width = RiftWindow:GetDefaultWidth()   -- number <- void
				Return values:
						width:	Default window width.
			GetTitle
				Function documentation:
					Get the current title for this element.
						title = RiftWindow:GetTitle()   -- string <- void
				Return values:
						title:	The current title of the element.
			GetTrimDimensions
				Function documentation:
					Gets the thicknesses of the border's visual trim.
						left, top, right, bottom = RiftWindow:GetTrimDimensions()   -- number, number, number, number <- void
				Return values:
						bottom:	The thickness of the bottom window border.
						left:	The thickness of the left window border.
						right:	The thickness of the right window border.
						top:	The thickness of the top window border.
			SetController
				Function documentation:
					Sets the current controller for this window. The controller will take on the exact dimensions of the RiftWindow object, and the other element will adjust accordingly.
					Not permitted on a frame with "restricted" SecureMode while the addon environment is secured.
						RiftWindow:SetController(controller)   -- string
				Parameters:
						controller:	The new controller ID. May be either "border" or "content".
			SetTitle
				Function documentation:
					Set the current title for this element.
						RiftWindow:SetTitle(title)   -- string
				Parameters:
						title:	The new title for the element.
		Events:
			(No extra events)