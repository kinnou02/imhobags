local Addon, private = ...local ipairs = ipairslocal pairs = pairslocal string = stringlocal table = tablelocal UI = UI-- Frames cannot be deleted, keep a cache and only create new frames if the cache is emptylocal cachedLabels = { }setfenv(1, private)Ux = Ux or { }Ux.MailWindow = { }-- Private methods-- ============================================================================local function getGroupLabel(self, mail)	local label	if(#cachedLabels == 0) then		label = UI.CreateFrame("Text", "", self)		label:SetFontSize(14)		label:SetBackgroundColor(1, 1, 1, 0.1)		function label:Dispose()			self:SetVisible(false)			table.insert(cachedLabels, self)		end		function label:SetInfo(sell, slots)		end	else		label = table.remove(cachedLabels)		label:SetVisible(true)		label:SetParent(self)	end	label:SetText(mail[1])	label:SetHeight(label:GetFullHeight())	return labelendlocal empty = { }local function sortGroups(self)	local function getItems(mail)		for k, v in pairs(self.groupKeys) do			if(v == mail) then				return k			end		end		return empty	end		self.sortedMails = { }	for mail, data in pairs(self.mails) do		table.insert(self.sortedMails, { self.mailSortKey(data), data, getItems(data) })	end	table.sort(self.sortedMails, function(a, b) return a[1] < b[1] end)endlocal function sortItems(self)	for _, group in ipairs(self.groups) do		table.sort(group, function(a, b) return self.sortFunc(a.type, b.type) end)	endendlocal function getGroups(self)	self.groups, self.groupKeys = ItemDB.GetGroupedItems(self.items, self.groupFunc)	self.mails = self.matrix:GetUnsortedMails()	sortGroups(self)	sortItems(self)endlocal function iterateGroups(self)	local i, n = 1, #self.sortedMails	local f = function(self)		if(i > n) then			return nil		else			local mail = self.sortedMails[i]			i = i + 1			return mail, mail[3]		end	end	return f, selfendlocal function leftUp(self)endlocal function setCharacter(self)end-- Public methods-- ============================================================================function Ux.MailWindow.New(title, character, location, condensed, native)	local self = Ux.ItemWindowBase.New(title, character, "mail", true, nil)		self.mailButton:SetTexture("Rift", [[Data/\UI\item_icons\bag20.dds]])	function self.mailButton.Event.LeftDown()		Ux.ShowItemWindow(self.charSelector:GetText(), "inventory")	end	self.getGroups = getGroups	self.leftUp = leftUp	self.setCharacter = setCharacter	self.getGroupLabel = getGroupLabel	self.iterateGroups = iterateGroups	self.groupFunc = Group.Default.GetMail	self.groupSortFunc = Group.Default.SortByCategoryKey	self.sortFunc = Sort.Default.ByItemName	self.mailSortKey = function(mail) return mail.from .. ": " .. mail.subject end		self:SetCharacter(character, "mail")		return selfend