local Addon, private = ...local ipairs = ipairslocal string = stringlocal table = tablelocal type = typelocal Inspect = Inspectlocal UI = UI-- Frames cannot be deleted, keep a cache and only create new frames if the cache is emptylocal cachedLabels = { }setfenv(1, private)Ux = Ux or { }Ux.ItemWindow = { }-- Private methods-- ============================================================================local function getGroupLabel(self, name)	local label	if(#cachedLabels == 0) then		label = UI.CreateFrame("Text", "", self)		label:SetFontSize(14)		label:SetBackgroundColor(1, 1, 1, 0.1)		function label:Dispose()			self:SetVisible(false)			table.insert(cachedLabels, self)		end		function label:SetInfo(sell, slots)			if(self:GetText() == L.CategoryName.sellable) then				self:SetText(string.format("%s (%i) - %s"), self:GetText(), slots, Utils.FormatCoin(sell))			end		end	else		label = table.remove(cachedLabels)		label:SetVisible(true)		label:SetParent(self)	end	label:SetText(name)	label:SetHeight(label:GetFullHeight())	return labelendlocal function sortGroups(self)	table.sort(self.groups, function(a, b) return self.groupSortFunc(a, b, self.groupKeys) end)endlocal function sortItems(self)	for _, group in ipairs(self.groups) do		table.sort(group, function(a, b) return self.sortFunc(a.type, b.type) end)	endendlocal function getGroups(self)	self.groups, self.groupKeys = ItemDB.GetGroupedItems(self.items, self.groupFunc)	sortGroups(self)	sortItems(self)endlocal function iterateGroups(self)	local i, n = 1, #self.groups	local f = function(self)		if(i > n) then			return nil		else			local items = self.groups[i]			local name = self.groupKeys[items]			i = i + 1			return name, items		end	end	return f, selfendlocal function leftUp(self)	-- Drop item	local cursor, held = Inspect.Cursor()	if(cursor and cursor == "item") then		if(isNotLocked(self.window) and #self.window.empty > 0) then			Command.Item.Move(held, self.window.empty[1])		end	endendlocal function setCharacter(self)end-- Public methods-- ============================================================================local function ItemWindow_Update(self)	self:base_Update()		-- Show number of empty slots	local n = (type(self.empty) == "table" and #self.empty) or self.empty	self:SetTitle(string.format("%s (%i)", self.title, n))endfunction Ux.ItemWindow.New(title, character, location, condensed, native)	local self = Ux.ItemWindowBase.New(title, character, location, condensed, native)		if(location == "bank") then		self.bankButton:SetTexture("Rift", [[Data/\UI\item_icons\bag20.dds]])		function self.bankButton.Event.LeftDown()			Ux.ShowItemWindow(self.charSelector:GetText(), "inventory")		end	end		self.base_Update = self.Update	self.Update = ItemWindow_Update	self.getGroups = getGroups	self.leftUp = leftUp	self.setCharacter = setCharacter	self.getGroupLabel = getGroupLabel	self.iterateGroups = iterateGroups	self.groupFunc = Group.Default.GetLocalizedShortCategoryWithJunk	self.groupSortFunc = Group.Default.SortByCategoryNameWithJunk	self.sortFunc = Sort.Default.ByItemName		self:SetCharacter(character, location)		return selfend