local identifier = (...).idlocal addon = (...).datalocal ipairs = ipairslocal getmetatable = getmetatablelocal print = printlocal table = tablelocal dump = dumplocal Event = Eventlocal Inspect = Inspectlocal UI = UI-- Frames cannot be deleted, keep a cache and only create new frames if the cache is emptylocal cachedGroups = { }setfenv(1, addon)Ux = Ux or { }Ux.ItemWindow = { }ItemWindowColumns = 8ItemWindowPadding = 8ItemWindowCellSpacing = 2-- Private methods-- ============================================================================local function ItemWindow_createGroupLabel(window)	local text	if(#cachedGroups == 0) then		text = UI.CreateFrame("Text", "", window)		text:SetFontSize(14)	else		text = table.remove(cachedGroups)		text:SetVisible(true)	end	return textendlocal function ItemWindow_clear(self)	-- Clear all groups and buttons and return them to cache	for _, label in ipairs(self.groupLabels) do		label:SetVisible(false)		table.insert(cachedGroups, label)	end	for _, btn in ipairs(self.buttons) do		btn:Dispose()	end	self.groupLabels = { }	self.buttons = { }endlocal function ItemWindow_sortGroups(self)	table.sort(self.groups, function(a, b) return self.groupSortFunc(a, b, self.groupKeys) end)endlocal function ItemWindow_sortItems(self)	for _, group in ipairs(self.groups) do		table.sort(group, function(a, b) return self.sortFunc(a.type, b.type) end)	endendlocal function ItemWindow_getGroups(self)	self.groups, self.groupKeys = self.matrix:GetGroupedItems(self.items, self.groupFunc)	ItemWindow_sortGroups(self)	ItemWindow_sortItems(self)endlocal function ItemWindow_getItems(self)	self.items, self.empty, self.success = self.matrix:GetUnsortedItems(condensed)	ItemWindow_getGroups(self)endlocal function ItemWindow_SetCharacter(self, character, location)	self.matrix = ItemDB.GetItemMatrix(character, location)	self.lastUpdate = -2endlocal function ItemWindow_Update(self)	ItemWindow_clear(self)		local left, top, right, bottom = self:GetTrimDimensions()	left = left + ItemWindowPadding	top = top + ItemWindowPadding	right = right + ItemWindowPadding	bottom = bottom + ItemWindowPadding		local x, y = left, top	local dx, dy = ItemButtonWidth, ItemButtonHeight	local spacing = ItemWindowCellSpacing		for _, group in ipairs(self.groups) do		if(x > left) then			x = left			y = y + dy		end		local label = ItemWindow_createGroupLabel(self)		table.insert(self.groupLabels, label)		label:SetText(self.groupKeys[group])		label:SetHeight(label:GetFullHeight())		label:SetWidth(self:GetWidth() - right)		label:SetPoint("TOPLEFT", self, "TOPLEFT", x, y)		y = y + label:GetHeight()				for _, item in ipairs(group) do			local button = Ux.CreateItemButton(self)			table.insert(self.buttons, button)			if(x + dx > self:GetWidth() - right) then				x = left				y = y + dy + spacing			end			button:SetPoint("TOPLEFT", self, "TOPLEFT", x, y)			button:SetItem(item.type, item.slots, item.stack)			x = x + dx + spacing		end	end		self:SetHeight(y + bottom + dy)endlocal function ItemWindow_MouseMove(...)	print("move")endlocal function ItemWindow_Close(self)	self:GetParent():SetVisible(false)endlocal function ItemWindow_systemUpdateBegin(self, ...)	local now = Inspect.Time.Frame()	if(self.matrix.lastUpdate > self.lastUpdate) then		self.lastUpdate = now		ItemWindow_getItems(self)		ItemWindow_Update(self)	elseif(not self.success and (now - self.lastUpdate > 1)) then		self.lastUpdate = now		ItemWindow_getItems(self)		ItemWindow_Update(self)	endend-- Public methods-- ============================================================================function Ux.ItemWindow.New(title, character, location, condensed, native)	local window = UI.CreateFrame("RiftWindow", "ImhoBags_ItemWindow_"..title, Ux.Context)	window:SetMouseMasking("full")	window:SetTitle(title)	local left, top, right, bottom = window:GetTrimDimensions()	local width = ItemWindowColumns * ItemButtonWidth + left + right + 2 * ItemWindowPadding	width = width + (ItemWindowColumns - 1) * ItemWindowCellSpacing	window:SetWidth(width)		local closeButton = UI.CreateFrame("RiftButton", "", window)	closeButton:SetSkin("close")	closeButton:SetPoint("TOPRIGHT", window, "TOPRIGHT", -7, 16)	closeButton.Event.LeftPress = window_Close		window.SetCharacter = ItemWindow_SetCharacter		window.Event.MouseMove = ItemWindow_MouseMove		window.buttons = { }	window.groupLabels = { }		window.groupFunc = Group.Default.GetLocalizedShortCategoryWithJunk	window.groupSortFunc = Group.Default.SortByCategoryNameWithJunk	window.sortFunc = Sort.Default.ByItemName		window.condensed = condensed	window:SetCharacter(character, location)		-- TODO: hook to native frame		table.insert(Event.System.Update.Begin, { function(...) ItemWindow_systemUpdateBegin(window, ...) end, identifier, "ItemWindow_systemUpdateBegin" })	return windowend